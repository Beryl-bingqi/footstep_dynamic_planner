/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/humanoid_msgs/humanoid_nav_msgs/msg/StepTarget.msg */
#ifndef HUMANOID_NAV_MSGS_MESSAGE_STEPTARGET_H
#define HUMANOID_NAV_MSGS_MESSAGE_STEPTARGET_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "geometry_msgs/Pose2D.h"

namespace humanoid_nav_msgs
{
template <class ContainerAllocator>
struct StepTarget_ {
  typedef StepTarget_<ContainerAllocator> Type;

  StepTarget_()
  : pose()
  , leg(0)
  {
  }

  StepTarget_(const ContainerAllocator& _alloc)
  : pose(_alloc)
  , leg(0)
  {
  }

  typedef  ::geometry_msgs::Pose2D_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose2D_<ContainerAllocator>  pose;

  typedef uint8_t _leg_type;
  uint8_t leg;

  enum { right = 0 };
  enum { left = 1 };

  typedef boost::shared_ptr< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StepTarget
typedef  ::humanoid_nav_msgs::StepTarget_<std::allocator<void> > StepTarget;

typedef boost::shared_ptr< ::humanoid_nav_msgs::StepTarget> StepTargetPtr;
typedef boost::shared_ptr< ::humanoid_nav_msgs::StepTarget const> StepTargetConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace humanoid_nav_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8ccf34ddb67039fbda0d9b2515ebb1ea";
  }

  static const char* value(const  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8ccf34ddb67039fbULL;
  static const uint64_t static_value2 = 0xda0d9b2515ebb1eaULL;
};

template<class ContainerAllocator>
struct DataType< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "humanoid_nav_msgs/StepTarget";
  }

  static const char* value(const  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Target for a single stepping motion of a humanoid's leg\n\
\n\
geometry_msgs/Pose2D pose   # step pose as relative offset to last leg\n\
uint8 leg                   # which leg to use (left/right, see below)\n\
\n\
uint8 right=0               # right leg constant\n\
uint8 left=1                # left leg constant\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose2D\n\
# This expresses a position and orientation on a 2D manifold.\n\
\n\
float64 x\n\
float64 y\n\
float64 theta\n\
";
  }

  static const char* value(const  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose);
    stream.next(m.leg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StepTarget_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::humanoid_nav_msgs::StepTarget_<ContainerAllocator> & v) 
  {
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose2D_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "leg: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leg);
  }
};


} // namespace message_operations
} // namespace ros

#endif // HUMANOID_NAV_MSGS_MESSAGE_STEPTARGET_H

