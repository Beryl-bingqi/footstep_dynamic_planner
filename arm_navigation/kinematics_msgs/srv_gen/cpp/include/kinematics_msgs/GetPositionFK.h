/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/kinematics_msgs/srv/GetPositionFK.srv */
#ifndef KINEMATICS_MSGS_SERVICE_GETPOSITIONFK_H
#define KINEMATICS_MSGS_SERVICE_GETPOSITIONFK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "arm_navigation_msgs/RobotState.h"


#include "geometry_msgs/PoseStamped.h"
#include "arm_navigation_msgs/ArmNavigationErrorCodes.h"

namespace kinematics_msgs
{
template <class ContainerAllocator>
struct GetPositionFKRequest_ {
  typedef GetPositionFKRequest_<ContainerAllocator> Type;

  GetPositionFKRequest_()
  : header()
  , fk_link_names()
  , robot_state()
  {
  }

  GetPositionFKRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , fk_link_names(_alloc)
  , robot_state(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fk_link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fk_link_names;

  typedef  ::arm_navigation_msgs::RobotState_<ContainerAllocator>  _robot_state_type;
   ::arm_navigation_msgs::RobotState_<ContainerAllocator>  robot_state;


  typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPositionFKRequest
typedef  ::kinematics_msgs::GetPositionFKRequest_<std::allocator<void> > GetPositionFKRequest;

typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKRequest> GetPositionFKRequestPtr;
typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKRequest const> GetPositionFKRequestConstPtr;


template <class ContainerAllocator>
struct GetPositionFKResponse_ {
  typedef GetPositionFKResponse_<ContainerAllocator> Type;

  GetPositionFKResponse_()
  : pose_stamped()
  , fk_link_names()
  , error_code()
  {
  }

  GetPositionFKResponse_(const ContainerAllocator& _alloc)
  : pose_stamped(_alloc)
  , fk_link_names(_alloc)
  , error_code(_alloc)
  {
  }

  typedef std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  _pose_stamped_type;
  std::vector< ::geometry_msgs::PoseStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::other >  pose_stamped;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _fk_link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  fk_link_names;

  typedef  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  _error_code_type;
   ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  error_code;


  typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetPositionFKResponse
typedef  ::kinematics_msgs::GetPositionFKResponse_<std::allocator<void> > GetPositionFKResponse;

typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKResponse> GetPositionFKResponsePtr;
typedef boost::shared_ptr< ::kinematics_msgs::GetPositionFKResponse const> GetPositionFKResponseConstPtr;

struct GetPositionFK
{

typedef GetPositionFKRequest Request;
typedef GetPositionFKResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetPositionFK
} // namespace kinematics_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ddaa8b9932e60599795bcb983e28cf57";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xddaa8b9932e60599ULL;
  static const uint64_t static_value2 = 0x795bcb983e28cf57ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinematics_msgs/GetPositionFKRequest";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
Header header\n\
\n\
\n\
string[] fk_link_names\n\
\n\
\n\
arm_navigation_msgs/RobotState robot_state\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/RobotState\n\
# This message contains information about the robot state, i.e. the positions of its joints and links\n\
sensor_msgs/JointState joint_state\n\
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointState\n\
#A representation of a multi-dof joint state\n\
time stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4a3efc190f6ac6f248069cfa3cd94286";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4a3efc190f6ac6f2ULL;
  static const uint64_t static_value2 = 0x48069cfa3cd94286ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinematics_msgs/GetPositionFKResponse";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
geometry_msgs/PoseStamped[] pose_stamped\n\
\n\
\n\
string[] fk_link_names\n\
\n\
arm_navigation_msgs/ArmNavigationErrorCodes error_code\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/ArmNavigationErrorCodes\n\
int32 val\n\
\n\
# overall behavior\n\
int32 PLANNING_FAILED=-1\n\
int32 SUCCESS=1\n\
int32 TIMED_OUT=-2\n\
\n\
# start state errors\n\
int32 START_STATE_IN_COLLISION=-3\n\
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4\n\
\n\
# goal errors\n\
int32 GOAL_IN_COLLISION=-5\n\
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6\n\
\n\
# robot state\n\
int32 INVALID_ROBOT_STATE=-7\n\
int32 INCOMPLETE_ROBOT_STATE=-8\n\
\n\
# planning request errors\n\
int32 INVALID_PLANNER_ID=-9\n\
int32 INVALID_NUM_PLANNING_ATTEMPTS=-10\n\
int32 INVALID_ALLOWED_PLANNING_TIME=-11\n\
int32 INVALID_GROUP_NAME=-12\n\
int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13\n\
int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14\n\
int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15\n\
int32 INVALID_PATH_JOINT_CONSTRAINTS=-16\n\
int32 INVALID_PATH_POSITION_CONSTRAINTS=-17\n\
int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18\n\
\n\
# state/trajectory monitor errors\n\
int32 INVALID_TRAJECTORY=-19\n\
int32 INVALID_INDEX=-20\n\
int32 JOINT_LIMITS_VIOLATED=-21\n\
int32 PATH_CONSTRAINTS_VIOLATED=-22\n\
int32 COLLISION_CONSTRAINTS_VIOLATED=-23\n\
int32 GOAL_CONSTRAINTS_VIOLATED=-24\n\
int32 JOINTS_NOT_MOVING=-25\n\
int32 TRAJECTORY_CONTROLLER_FAILED=-26\n\
\n\
# system errors\n\
int32 FRAME_TRANSFORM_FAILURE=-27\n\
int32 COLLISION_CHECKING_UNAVAILABLE=-28\n\
int32 ROBOT_STATE_STALE=-29\n\
int32 SENSOR_INFO_STALE=-30\n\
\n\
# kinematics errors\n\
int32 NO_IK_SOLUTION=-31\n\
int32 INVALID_LINK_NAME=-32\n\
int32 IK_LINK_IN_COLLISION=-33\n\
int32 NO_FK_SOLUTION=-34\n\
int32 KINEMATICS_STATE_IN_COLLISION=-35\n\
\n\
# general errors\n\
int32 INVALID_TIMEOUT=-36\n\
\n\
\n\
";
  }

  static const char* value(const  ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.fk_link_names);
    stream.next(m.robot_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPositionFKRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.pose_stamped);
    stream.next(m.fk_link_names);
    stream.next(m.error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetPositionFKResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<kinematics_msgs::GetPositionFK> {
  static const char* value() 
  {
    return "2088007c8963e2252a67c872affa0985";
  }

  static const char* value(const kinematics_msgs::GetPositionFK&) { return value(); } 
};

template<>
struct DataType<kinematics_msgs::GetPositionFK> {
  static const char* value() 
  {
    return "kinematics_msgs/GetPositionFK";
  }

  static const char* value(const kinematics_msgs::GetPositionFK&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2088007c8963e2252a67c872affa0985";
  }

  static const char* value(const kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinematics_msgs/GetPositionFK";
  }

  static const char* value(const kinematics_msgs::GetPositionFKRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2088007c8963e2252a67c872affa0985";
  }

  static const char* value(const kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinematics_msgs/GetPositionFK";
  }

  static const char* value(const kinematics_msgs::GetPositionFKResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // KINEMATICS_MSGS_SERVICE_GETPOSITIONFK_H

