"""autogenerated by genpy from kinematics_msgs/GetConstraintAwarePositionIKRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_navigation_msgs.msg
import kinematics_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class GetConstraintAwarePositionIKRequest(genpy.Message):
  _md5sum = "3772a29c71f9b0627ec5c37e3ab80920"
  _type = "kinematics_msgs/GetConstraintAwarePositionIKRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

kinematics_msgs/PositionIKRequest ik_request

arm_navigation_msgs/Constraints constraints

duration timeout

================================================================================
MSG: kinematics_msgs/PositionIKRequest
# A Position IK request message
# The name of the link for which we are computing IK
string ik_link_name

# The (stamped) pose of the link
geometry_msgs/PoseStamped pose_stamped

# A RobotState consisting of hint/seed positions for the IK computation. 
# These may be used to seed the IK search. 
# The seed state MUST contain state for all joints to be used by the IK solver
# to compute IK. The list of joints that the IK solver deals with can be found using
# the kinematics_msgs/GetKinematicSolverInfo
arm_navigation_msgs/RobotState ik_seed_state

# Additional state information can be provided here to specify the starting positions 
# of other joints/links on the robot.
arm_navigation_msgs/RobotState robot_state

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: arm_navigation_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: arm_navigation_msgs/MultiDOFJointState
#A representation of a multi-dof joint state
time stamp
string[] joint_names
string[] frame_ids
string[] child_frame_ids
geometry_msgs/Pose[] poses

================================================================================
MSG: arm_navigation_msgs/Constraints
# This message contains a list of motion planning constraints.

arm_navigation_msgs/JointConstraint[] joint_constraints
arm_navigation_msgs/PositionConstraint[] position_constraints
arm_navigation_msgs/OrientationConstraint[] orientation_constraints
arm_navigation_msgs/VisibilityConstraint[] visibility_constraints

================================================================================
MSG: arm_navigation_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint
float64 weight
================================================================================
MSG: arm_navigation_msgs/PositionConstraint
# This message contains the definition of a position constraint.
Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Point target_point_offset

# The nominal/target position for the point we are planning for
geometry_msgs/Point position

# The shape of the bounded region that constrains the position of the end-effector
# This region is always centered at the position defined above
arm_navigation_msgs/Shape constraint_region_shape

# The orientation of the bounded region that constrains the position of the end-effector. 
# This allows the specification of non-axis aligned constraints
geometry_msgs/Quaternion constraint_region_orientation

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/Shape
byte SPHERE=0
byte BOX=1
byte CYLINDER=2
byte MESH=3

byte type


#### define sphere, box, cylinder ####
# the origin of each shape is considered at the shape's center

# for sphere
# radius := dimensions[0]

# for cylinder
# radius := dimensions[0]
# length := dimensions[1]
# the length is along the Z axis

# for box
# size_x := dimensions[0]
# size_y := dimensions[1]
# size_z := dimensions[2]
float64[] dimensions


#### define mesh ####

# list of triangles; triangle k is defined by tre vertices located
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]
int32[] triangles
geometry_msgs/Point[] vertices

================================================================================
MSG: arm_navigation_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.
Header header

# The robot link this constraint refers to
string link_name

# The type of the constraint
int32 type
int32 LINK_FRAME=0
int32 HEADER_FRAME=1

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# optional RPY error tolerances specified if 
float64 absolute_roll_tolerance
float64 absolute_pitch_tolerance
float64 absolute_yaw_tolerance

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/VisibilityConstraint
# This message contains the definition of a visibility constraint.
Header header

# The point stamped target that needs to be kept within view of the sensor
geometry_msgs/PointStamped target

# The local pose of the frame in which visibility is to be maintained
# The frame id should represent the robot link to which the sensor is attached
# The visual axis of the sensor is assumed to be along the X axis of this frame
geometry_msgs/PoseStamped sensor_pose

# The deviation (in radians) that will be tolerated
# Constraint error will be measured as the solid angle between the 
# X axis of the frame defined above and the vector between the origin 
# of the frame defined above and the target location
float64 absolute_tolerance


================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

"""
  __slots__ = ['ik_request','constraints','timeout']
  _slot_types = ['kinematics_msgs/PositionIKRequest','arm_navigation_msgs/Constraints','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ik_request,constraints,timeout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetConstraintAwarePositionIKRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.ik_request is None:
        self.ik_request = kinematics_msgs.msg.PositionIKRequest()
      if self.constraints is None:
        self.constraints = arm_navigation_msgs.msg.Constraints()
      if self.timeout is None:
        self.timeout = genpy.Duration()
    else:
      self.ik_request = kinematics_msgs.msg.PositionIKRequest()
      self.constraints = arm_navigation_msgs.msg.Constraints()
      self.timeout = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ik_request.ik_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs))
      _x = self.ik_request.pose_stamped.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w, _x.ik_request.ik_seed_state.joint_state.header.seq, _x.ik_request.ik_seed_state.joint_state.header.stamp.secs, _x.ik_request.ik_seed_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.ik_seed_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ik_request.ik_seed_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.ik_seed_state.joint_state.position))
      length = len(self.ik_request.ik_seed_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.ik_seed_state.joint_state.velocity))
      length = len(self.ik_request.ik_seed_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.ik_seed_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.secs, _x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ik_request.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.robot_state.joint_state.position))
      length = len(self.ik_request.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.robot_state.joint_state.velocity))
      length = len(self.ik_request.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.ik_request.robot_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.ik_request.robot_state.multi_dof_joint_state.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.poses:
        _v3 = val1.position
        _x = _v3
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v4 = val1.orientation
        _x = _v4
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.position_constraints:
        _v5 = val1.header
        buff.write(_struct_I.pack(_v5.seq))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v7 = val1.target_point_offset
        _x = _v7
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = val1.position
        _x = _v8
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v9.type))
        length = len(_v9.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v9.dimensions))
        length = len(_v9.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v9.triangles))
        length = len(_v9.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v9.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v10 = val1.constraint_region_orientation
        _x = _v10
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.orientation_constraints:
        _v11 = val1.header
        buff.write(_struct_I.pack(_v11.seq))
        _v12 = _v11.stamp
        _x = _v12
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v11.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v13 = val1.orientation
        _x = _v13
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.visibility_constraints:
        _v14 = val1.header
        buff.write(_struct_I.pack(_v14.seq))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v16 = val1.target
        _v17 = _v16.header
        buff.write(_struct_I.pack(_v17.seq))
        _v18 = _v17.stamp
        _x = _v18
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v17.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v19 = _v16.point
        _x = _v19
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v20 = val1.sensor_pose
        _v21 = _v20.header
        buff.write(_struct_I.pack(_v21.seq))
        _v22 = _v21.stamp
        _x = _v22
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v21.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v23 = _v20.pose
        _v24 = _v23.position
        _x = _v24
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v25 = _v23.orientation
        _x = _v25
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self
      buff.write(_struct_2i.pack(_x.timeout.secs, _x.timeout.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ik_request is None:
        self.ik_request = kinematics_msgs.msg.PositionIKRequest()
      if self.constraints is None:
        self.constraints = arm_navigation_msgs.msg.Constraints()
      if self.timeout is None:
        self.timeout = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_link_name = str[start:end].decode('utf-8')
      else:
        self.ik_request.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.pose_stamped.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.pose_stamped.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w, _x.ik_request.ik_seed_state.joint_state.header.seq, _x.ik_request.ik_seed_state.joint_state.header.stamp.secs, _x.ik_request.ik_seed_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_seed_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.ik_seed_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.secs, _x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v26 = val1.position
        _x = _v26
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v27 = val1.orientation
        _x = _v27
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ik_request.ik_seed_state.multi_dof_joint_state.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.ik_request.robot_state.multi_dof_joint_state.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v28 = val1.position
        _x = _v28
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v29 = val1.orientation
        _x = _v29
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v30 = val1.header
        start = end
        end += 4
        (_v30.seq,) = _struct_I.unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8')
        else:
          _v30.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v32 = val1.target_point_offset
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v33 = val1.position
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v34 = val1.constraint_region_shape
        start = end
        end += 1
        (_v34.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v34.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v34.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v34.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v34.vertices.append(val3)
        _v35 = val1.constraint_region_orientation
        _x = _v35
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v36 = val1.header
        start = end
        end += 4
        (_v36.seq,) = _struct_I.unpack(str[start:end])
        _v37 = _v36.stamp
        _x = _v37
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v36.frame_id = str[start:end].decode('utf-8')
        else:
          _v36.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v38 = val1.orientation
        _x = _v38
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v39 = val1.header
        start = end
        end += 4
        (_v39.seq,) = _struct_I.unpack(str[start:end])
        _v40 = _v39.stamp
        _x = _v40
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v39.frame_id = str[start:end].decode('utf-8')
        else:
          _v39.frame_id = str[start:end]
        _v41 = val1.target
        _v42 = _v41.header
        start = end
        end += 4
        (_v42.seq,) = _struct_I.unpack(str[start:end])
        _v43 = _v42.stamp
        _x = _v43
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v42.frame_id = str[start:end].decode('utf-8')
        else:
          _v42.frame_id = str[start:end]
        _v44 = _v41.point
        _x = _v44
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v45 = val1.sensor_pose
        _v46 = _v45.header
        start = end
        end += 4
        (_v46.seq,) = _struct_I.unpack(str[start:end])
        _v47 = _v46.stamp
        _x = _v47
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v46.frame_id = str[start:end].decode('utf-8')
        else:
          _v46.frame_id = str[start:end]
        _v48 = _v45.pose
        _v49 = _v48.position
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v50 = _v48.orientation
        _x = _v50
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.constraints.visibility_constraints.append(val1)
      _x = self
      start = end
      end += 8
      (_x.timeout.secs, _x.timeout.nsecs,) = _struct_2i.unpack(str[start:end])
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ik_request.ik_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs))
      _x = self.ik_request.pose_stamped.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w, _x.ik_request.ik_seed_state.joint_state.header.seq, _x.ik_request.ik_seed_state.joint_state.header.stamp.secs, _x.ik_request.ik_seed_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.ik_seed_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ik_request.ik_seed_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.ik_seed_state.joint_state.position.tostring())
      length = len(self.ik_request.ik_seed_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.ik_seed_state.joint_state.velocity.tostring())
      length = len(self.ik_request.ik_seed_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.ik_seed_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.secs, _x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.ik_seed_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.ik_seed_state.multi_dof_joint_state.poses:
        _v51 = val1.position
        _x = _v51
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v52 = val1.orientation
        _x = _v52
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      _x = self
      buff.write(_struct_3I.pack(_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs))
      _x = self.ik_request.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.ik_request.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.position.tostring())
      length = len(self.ik_request.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.velocity.tostring())
      length = len(self.ik_request.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.ik_request.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.ik_request.robot_state.multi_dof_joint_state.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.ik_request.robot_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.ik_request.robot_state.multi_dof_joint_state.poses:
        _v53 = val1.position
        _x = _v53
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v54 = val1.orientation
        _x = _v54
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.position_constraints:
        _v55 = val1.header
        buff.write(_struct_I.pack(_v55.seq))
        _v56 = _v55.stamp
        _x = _v56
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v55.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v57 = val1.target_point_offset
        _x = _v57
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v58 = val1.position
        _x = _v58
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v59 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v59.type))
        length = len(_v59.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v59.dimensions.tostring())
        length = len(_v59.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v59.triangles.tostring())
        length = len(_v59.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v59.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v60 = val1.constraint_region_orientation
        _x = _v60
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.orientation_constraints:
        _v61 = val1.header
        buff.write(_struct_I.pack(_v61.seq))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v63 = val1.orientation
        _x = _v63
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.constraints.visibility_constraints:
        _v64 = val1.header
        buff.write(_struct_I.pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = val1.target
        _v67 = _v66.header
        buff.write(_struct_I.pack(_v67.seq))
        _v68 = _v67.stamp
        _x = _v68
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v67.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v69 = _v66.point
        _x = _v69
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v70 = val1.sensor_pose
        _v71 = _v70.header
        buff.write(_struct_I.pack(_v71.seq))
        _v72 = _v71.stamp
        _x = _v72
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v71.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v73 = _v70.pose
        _v74 = _v73.position
        _x = _v74
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v75 = _v73.orientation
        _x = _v75
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self
      buff.write(_struct_2i.pack(_x.timeout.secs, _x.timeout.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ik_request is None:
        self.ik_request = kinematics_msgs.msg.PositionIKRequest()
      if self.constraints is None:
        self.constraints = arm_navigation_msgs.msg.Constraints()
      if self.timeout is None:
        self.timeout = genpy.Duration()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_link_name = str[start:end].decode('utf-8')
      else:
        self.ik_request.ik_link_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ik_request.pose_stamped.header.seq, _x.ik_request.pose_stamped.header.stamp.secs, _x.ik_request.pose_stamped.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.pose_stamped.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.pose_stamped.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.ik_request.pose_stamped.pose.position.x, _x.ik_request.pose_stamped.pose.position.y, _x.ik_request.pose_stamped.pose.position.z, _x.ik_request.pose_stamped.pose.orientation.x, _x.ik_request.pose_stamped.pose.orientation.y, _x.ik_request.pose_stamped.pose.orientation.z, _x.ik_request.pose_stamped.pose.orientation.w, _x.ik_request.ik_seed_state.joint_state.header.seq, _x.ik_request.ik_seed_state.joint_state.header.stamp.secs, _x.ik_request.ik_seed_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.ik_seed_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.ik_seed_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.ik_seed_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.secs, _x.ik_request.ik_seed_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.ik_seed_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.ik_seed_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v76 = val1.position
        _x = _v76
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v77 = val1.orientation
        _x = _v77
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ik_request.ik_seed_state.multi_dof_joint_state.poses.append(val1)
      _x = self
      start = end
      end += 12
      (_x.ik_request.robot_state.joint_state.header.seq, _x.ik_request.robot_state.joint_state.header.stamp.secs, _x.ik_request.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.ik_request.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.ik_request.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.ik_request.robot_state.multi_dof_joint_state.stamp.secs, _x.ik_request.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.ik_request.robot_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ik_request.robot_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v78 = val1.position
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v79 = val1.orientation
        _x = _v79
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.ik_request.robot_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v80 = val1.header
        start = end
        end += 4
        (_v80.seq,) = _struct_I.unpack(str[start:end])
        _v81 = _v80.stamp
        _x = _v81
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v80.frame_id = str[start:end].decode('utf-8')
        else:
          _v80.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v82 = val1.target_point_offset
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v83 = val1.position
        _x = _v83
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v84 = val1.constraint_region_shape
        start = end
        end += 1
        (_v84.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v84.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v84.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v84.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v84.vertices.append(val3)
        _v85 = val1.constraint_region_orientation
        _x = _v85
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v86 = val1.header
        start = end
        end += 4
        (_v86.seq,) = _struct_I.unpack(str[start:end])
        _v87 = _v86.stamp
        _x = _v87
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v86.frame_id = str[start:end].decode('utf-8')
        else:
          _v86.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v88 = val1.orientation
        _x = _v88
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v89 = val1.header
        start = end
        end += 4
        (_v89.seq,) = _struct_I.unpack(str[start:end])
        _v90 = _v89.stamp
        _x = _v90
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v89.frame_id = str[start:end].decode('utf-8')
        else:
          _v89.frame_id = str[start:end]
        _v91 = val1.target
        _v92 = _v91.header
        start = end
        end += 4
        (_v92.seq,) = _struct_I.unpack(str[start:end])
        _v93 = _v92.stamp
        _x = _v93
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v92.frame_id = str[start:end].decode('utf-8')
        else:
          _v92.frame_id = str[start:end]
        _v94 = _v91.point
        _x = _v94
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v95 = val1.sensor_pose
        _v96 = _v95.header
        start = end
        end += 4
        (_v96.seq,) = _struct_I.unpack(str[start:end])
        _v97 = _v96.stamp
        _x = _v97
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v96.frame_id = str[start:end].decode('utf-8')
        else:
          _v96.frame_id = str[start:end]
        _v98 = _v95.pose
        _v99 = _v98.position
        _x = _v99
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v100 = _v98.orientation
        _x = _v100
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.constraints.visibility_constraints.append(val1)
      _x = self
      start = end
      end += 8
      (_x.timeout.secs, _x.timeout.nsecs,) = _struct_2i.unpack(str[start:end])
      self.timeout.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_d = struct.Struct("<d")
_struct_2I = struct.Struct("<2I")
_struct_2i = struct.Struct("<2i")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_7d3I = struct.Struct("<7d3I")
_struct_3d = struct.Struct("<3d")
"""autogenerated by genpy from kinematics_msgs/GetConstraintAwarePositionIKResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_navigation_msgs.msg
import geometry_msgs.msg
import std_msgs.msg
import genpy
import sensor_msgs.msg

class GetConstraintAwarePositionIKResponse(genpy.Message):
  _md5sum = "5a8bbc4eb2775fe00cbd09858fd3dc65"
  _type = "kinematics_msgs/GetConstraintAwarePositionIKResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
arm_navigation_msgs/RobotState solution
arm_navigation_msgs/ArmNavigationErrorCodes error_code


================================================================================
MSG: arm_navigation_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: arm_navigation_msgs/MultiDOFJointState
#A representation of a multi-dof joint state
time stamp
string[] joint_names
string[] frame_ids
string[] child_frame_ids
geometry_msgs/Pose[] poses

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: arm_navigation_msgs/ArmNavigationErrorCodes
int32 val

# overall behavior
int32 PLANNING_FAILED=-1
int32 SUCCESS=1
int32 TIMED_OUT=-2

# start state errors
int32 START_STATE_IN_COLLISION=-3
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4

# goal errors
int32 GOAL_IN_COLLISION=-5
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6

# robot state
int32 INVALID_ROBOT_STATE=-7
int32 INCOMPLETE_ROBOT_STATE=-8

# planning request errors
int32 INVALID_PLANNER_ID=-9
int32 INVALID_NUM_PLANNING_ATTEMPTS=-10
int32 INVALID_ALLOWED_PLANNING_TIME=-11
int32 INVALID_GROUP_NAME=-12
int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13
int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14
int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15
int32 INVALID_PATH_JOINT_CONSTRAINTS=-16
int32 INVALID_PATH_POSITION_CONSTRAINTS=-17
int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18

# state/trajectory monitor errors
int32 INVALID_TRAJECTORY=-19
int32 INVALID_INDEX=-20
int32 JOINT_LIMITS_VIOLATED=-21
int32 PATH_CONSTRAINTS_VIOLATED=-22
int32 COLLISION_CONSTRAINTS_VIOLATED=-23
int32 GOAL_CONSTRAINTS_VIOLATED=-24
int32 JOINTS_NOT_MOVING=-25
int32 TRAJECTORY_CONTROLLER_FAILED=-26

# system errors
int32 FRAME_TRANSFORM_FAILURE=-27
int32 COLLISION_CHECKING_UNAVAILABLE=-28
int32 ROBOT_STATE_STALE=-29
int32 SENSOR_INFO_STALE=-30

# kinematics errors
int32 NO_IK_SOLUTION=-31
int32 INVALID_LINK_NAME=-32
int32 IK_LINK_IN_COLLISION=-33
int32 NO_FK_SOLUTION=-34
int32 KINEMATICS_STATE_IN_COLLISION=-35

# general errors
int32 INVALID_TIMEOUT=-36


"""
  __slots__ = ['solution','error_code']
  _slot_types = ['arm_navigation_msgs/RobotState','arm_navigation_msgs/ArmNavigationErrorCodes']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       solution,error_code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetConstraintAwarePositionIKResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.solution is None:
        self.solution = arm_navigation_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = arm_navigation_msgs.msg.ArmNavigationErrorCodes()
    else:
      self.solution = arm_navigation_msgs.msg.RobotState()
      self.error_code = arm_navigation_msgs.msg.ArmNavigationErrorCodes()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs))
      _x = self.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.solution.joint_state.position))
      length = len(self.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.solution.joint_state.velocity))
      length = len(self.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.solution.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.solution.multi_dof_joint_state.stamp.secs, _x.solution.multi_dof_joint_state.stamp.nsecs))
      length = len(self.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.poses:
        _v101 = val1.position
        _x = _v101
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v102 = val1.orientation
        _x = _v102
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_i.pack(self.error_code.val))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.solution is None:
        self.solution = arm_navigation_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = arm_navigation_msgs.msg.ArmNavigationErrorCodes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.solution.multi_dof_joint_state.stamp.secs, _x.solution.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v103 = val1.position
        _x = _v103
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v104 = val1.orientation
        _x = _v104
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.solution.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (self.error_code.val,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs))
      _x = self.solution.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.solution.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.position.tostring())
      length = len(self.solution.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.velocity.tostring())
      length = len(self.solution.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.solution.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.solution.multi_dof_joint_state.stamp.secs, _x.solution.multi_dof_joint_state.stamp.nsecs))
      length = len(self.solution.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.solution.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.solution.multi_dof_joint_state.poses:
        _v105 = val1.position
        _x = _v105
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v106 = val1.orientation
        _x = _v106
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      buff.write(_struct_i.pack(self.error_code.val))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.solution is None:
        self.solution = arm_navigation_msgs.msg.RobotState()
      if self.error_code is None:
        self.error_code = arm_navigation_msgs.msg.ArmNavigationErrorCodes()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.solution.joint_state.header.seq, _x.solution.joint_state.header.stamp.secs, _x.solution.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.solution.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.solution.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.solution.multi_dof_joint_state.stamp.secs, _x.solution.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.solution.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.solution.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v107 = val1.position
        _x = _v107
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v108 = val1.orientation
        _x = _v108
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.solution.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (self.error_code.val,) = _struct_i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i = struct.Struct("<i")
_struct_4d = struct.Struct("<4d")
_struct_3I = struct.Struct("<3I")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
class GetConstraintAwarePositionIK(object):
  _type          = 'kinematics_msgs/GetConstraintAwarePositionIK'
  _md5sum = '76b178dd7f9e5aa0c4c559bc733d0d81'
  _request_class  = GetConstraintAwarePositionIKRequest
  _response_class = GetConstraintAwarePositionIKResponse
