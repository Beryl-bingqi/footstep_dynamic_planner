/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/kinematics_msgs/msg/KinematicSolverInfo.msg */
#ifndef KINEMATICS_MSGS_MESSAGE_KINEMATICSOLVERINFO_H
#define KINEMATICS_MSGS_MESSAGE_KINEMATICSOLVERINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/JointLimits.h"

namespace kinematics_msgs
{
template <class ContainerAllocator>
struct KinematicSolverInfo_ {
  typedef KinematicSolverInfo_<ContainerAllocator> Type;

  KinematicSolverInfo_()
  : joint_names()
  , limits()
  , link_names()
  {
  }

  KinematicSolverInfo_(const ContainerAllocator& _alloc)
  : joint_names(_alloc)
  , limits(_alloc)
  , link_names(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  joint_names;

  typedef std::vector< ::arm_navigation_msgs::JointLimits_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::JointLimits_<ContainerAllocator> >::other >  _limits_type;
  std::vector< ::arm_navigation_msgs::JointLimits_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::JointLimits_<ContainerAllocator> >::other >  limits;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  link_names;


  typedef boost::shared_ptr< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KinematicSolverInfo
typedef  ::kinematics_msgs::KinematicSolverInfo_<std::allocator<void> > KinematicSolverInfo;

typedef boost::shared_ptr< ::kinematics_msgs::KinematicSolverInfo> KinematicSolverInfoPtr;
typedef boost::shared_ptr< ::kinematics_msgs::KinematicSolverInfo const> KinematicSolverInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace kinematics_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cc048557c0f9795c392dd80f8bb00489";
  }

  static const char* value(const  ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcc048557c0f9795cULL;
  static const uint64_t static_value2 = 0x392dd80f8bb00489ULL;
};

template<class ContainerAllocator>
struct DataType< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "kinematics_msgs/KinematicSolverInfo";
  }

  static const char* value(const  ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A list of joints in the kinematic tree\n\
string[] joint_names\n\
# A list of joint limits corresponding to the joint names\n\
arm_navigation_msgs/JointLimits[] limits\n\
# A list of links that the kinematics node provides solutions for\n\
string[] link_names\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/JointLimits\n\
# This message contains information about limits of a particular joint (or control dimension)\n\
string joint_name\n\
\n\
# true if the joint has position limits\n\
bool has_position_limits\n\
\n\
# min and max position limits\n\
float64 min_position\n\
float64 max_position\n\
\n\
# true if joint has velocity limits\n\
bool has_velocity_limits\n\
\n\
# max velocity limit\n\
float64 max_velocity\n\
# min_velocity is assumed to be -max_velocity\n\
\n\
# true if joint has acceleration limits\n\
bool has_acceleration_limits\n\
# max acceleration limit\n\
float64 max_acceleration\n\
# min_acceleration is assumed to be -max_acceleration\n\
\n\
";
  }

  static const char* value(const  ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_names);
    stream.next(m.limits);
    stream.next(m.link_names);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KinematicSolverInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::kinematics_msgs::KinematicSolverInfo_<ContainerAllocator> & v) 
  {
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "limits[]" << std::endl;
    for (size_t i = 0; i < v.limits.size(); ++i)
    {
      s << indent << "  limits[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::JointLimits_<ContainerAllocator> >::stream(s, indent + "    ", v.limits[i]);
    }
    s << indent << "link_names[]" << std::endl;
    for (size_t i = 0; i < v.link_names.size(); ++i)
    {
      s << indent << "  link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_names[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // KINEMATICS_MSGS_MESSAGE_KINEMATICSOLVERINFO_H

