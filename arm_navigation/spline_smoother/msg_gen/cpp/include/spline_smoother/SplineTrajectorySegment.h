/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/spline_smoother/msg/SplineTrajectorySegment.msg */
#ifndef SPLINE_SMOOTHER_MESSAGE_SPLINETRAJECTORYSEGMENT_H
#define SPLINE_SMOOTHER_MESSAGE_SPLINETRAJECTORYSEGMENT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "spline_smoother/SplineCoefficients.h"

namespace spline_smoother
{
template <class ContainerAllocator>
struct SplineTrajectorySegment_ {
  typedef SplineTrajectorySegment_<ContainerAllocator> Type;

  SplineTrajectorySegment_()
  : duration()
  , joints()
  {
  }

  SplineTrajectorySegment_(const ContainerAllocator& _alloc)
  : duration()
  , joints(_alloc)
  {
  }

  typedef ros::Duration _duration_type;
  ros::Duration duration;

  typedef std::vector< ::spline_smoother::SplineCoefficients_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::spline_smoother::SplineCoefficients_<ContainerAllocator> >::other >  _joints_type;
  std::vector< ::spline_smoother::SplineCoefficients_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::spline_smoother::SplineCoefficients_<ContainerAllocator> >::other >  joints;


  typedef boost::shared_ptr< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SplineTrajectorySegment
typedef  ::spline_smoother::SplineTrajectorySegment_<std::allocator<void> > SplineTrajectorySegment;

typedef boost::shared_ptr< ::spline_smoother::SplineTrajectorySegment> SplineTrajectorySegmentPtr;
typedef boost::shared_ptr< ::spline_smoother::SplineTrajectorySegment const> SplineTrajectorySegmentConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace spline_smoother

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1c95257e91547459aede67dd02a209d6";
  }

  static const char* value(const  ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1c95257e91547459ULL;
  static const uint64_t static_value2 = 0xaede67dd02a209d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> > {
  static const char* value() 
  {
    return "spline_smoother/SplineTrajectorySegment";
  }

  static const char* value(const  ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> > {
  static const char* value() 
  {
    return "duration duration\n\
SplineCoefficients[] joints\n\
\n\
================================================================================\n\
MSG: spline_smoother/SplineCoefficients\n\
float64[] coefficients\n\
\n\
";
  }

  static const char* value(const  ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.duration);
    stream.next(m.joints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SplineTrajectorySegment_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::spline_smoother::SplineTrajectorySegment_<ContainerAllocator> & v) 
  {
    s << indent << "duration: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.duration);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::spline_smoother::SplineCoefficients_<ContainerAllocator> >::stream(s, indent + "    ", v.joints[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SPLINE_SMOOTHER_MESSAGE_SPLINETRAJECTORYSEGMENT_H

