/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/spline_smoother/msg/LSPBSplineCoefficients.msg */
#ifndef SPLINE_SMOOTHER_MESSAGE_LSPBSPLINECOEFFICIENTS_H
#define SPLINE_SMOOTHER_MESSAGE_LSPBSPLINECOEFFICIENTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace spline_smoother
{
template <class ContainerAllocator>
struct LSPBSplineCoefficients_ {
  typedef LSPBSplineCoefficients_<ContainerAllocator> Type;

  LSPBSplineCoefficients_()
  : coefficients()
  , linear_segment_duration(0.0)
  , quadratic_segment_duration(0.0)
  {
  }

  LSPBSplineCoefficients_(const ContainerAllocator& _alloc)
  : coefficients(_alloc)
  , linear_segment_duration(0.0)
  , quadratic_segment_duration(0.0)
  {
  }

  typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _coefficients_type;
  std::vector<double, typename ContainerAllocator::template rebind<double>::other >  coefficients;

  typedef double _linear_segment_duration_type;
  double linear_segment_duration;

  typedef double _quadratic_segment_duration_type;
  double quadratic_segment_duration;


  typedef boost::shared_ptr< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LSPBSplineCoefficients
typedef  ::spline_smoother::LSPBSplineCoefficients_<std::allocator<void> > LSPBSplineCoefficients;

typedef boost::shared_ptr< ::spline_smoother::LSPBSplineCoefficients> LSPBSplineCoefficientsPtr;
typedef boost::shared_ptr< ::spline_smoother::LSPBSplineCoefficients const> LSPBSplineCoefficientsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace spline_smoother

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c00dc8b55f1156bf5a7d2645875397b1";
  }

  static const char* value(const  ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc00dc8b55f1156bfULL;
  static const uint64_t static_value2 = 0x5a7d2645875397b1ULL;
};

template<class ContainerAllocator>
struct DataType< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> > {
  static const char* value() 
  {
    return "spline_smoother/LSPBSplineCoefficients";
  }

  static const char* value(const  ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64[] coefficients\n\
float64 linear_segment_duration\n\
float64 quadratic_segment_duration\n\
";
  }

  static const char* value(const  ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.coefficients);
    stream.next(m.linear_segment_duration);
    stream.next(m.quadratic_segment_duration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LSPBSplineCoefficients_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::spline_smoother::LSPBSplineCoefficients_<ContainerAllocator> & v) 
  {
    s << indent << "coefficients[]" << std::endl;
    for (size_t i = 0; i < v.coefficients.size(); ++i)
    {
      s << indent << "  coefficients[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coefficients[i]);
    }
    s << indent << "linear_segment_duration: ";
    Printer<double>::stream(s, indent + "  ", v.linear_segment_duration);
    s << indent << "quadratic_segment_duration: ";
    Printer<double>::stream(s, indent + "  ", v.quadratic_segment_duration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // SPLINE_SMOOTHER_MESSAGE_LSPBSPLINECOEFFICIENTS_H

