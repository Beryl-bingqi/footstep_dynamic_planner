/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/SimplePoseConstraint.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_SIMPLEPOSECONSTRAINT_H
#define ARM_NAVIGATION_MSGS_MESSAGE_SIMPLEPOSECONSTRAINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"
#include "geometry_msgs/Point.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct SimplePoseConstraint_ {
  typedef SimplePoseConstraint_<ContainerAllocator> Type;

  SimplePoseConstraint_()
  : header()
  , link_name()
  , pose()
  , absolute_position_tolerance()
  , absolute_roll_tolerance(0.0)
  , absolute_yaw_tolerance(0.0)
  , absolute_pitch_tolerance(0.0)
  , orientation_constraint_type(0)
  {
  }

  SimplePoseConstraint_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , link_name(_alloc)
  , pose(_alloc)
  , absolute_position_tolerance(_alloc)
  , absolute_roll_tolerance(0.0)
  , absolute_yaw_tolerance(0.0)
  , absolute_pitch_tolerance(0.0)
  , orientation_constraint_type(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  link_name;

  typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
   ::geometry_msgs::Pose_<ContainerAllocator>  pose;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _absolute_position_tolerance_type;
   ::geometry_msgs::Point_<ContainerAllocator>  absolute_position_tolerance;

  typedef double _absolute_roll_tolerance_type;
  double absolute_roll_tolerance;

  typedef double _absolute_yaw_tolerance_type;
  double absolute_yaw_tolerance;

  typedef double _absolute_pitch_tolerance_type;
  double absolute_pitch_tolerance;

  typedef int32_t _orientation_constraint_type_type;
  int32_t orientation_constraint_type;

  enum { HEADER_FRAME = 0 };
  enum { LINK_FRAME = 1 };

  typedef boost::shared_ptr< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SimplePoseConstraint
typedef  ::arm_navigation_msgs::SimplePoseConstraint_<std::allocator<void> > SimplePoseConstraint;

typedef boost::shared_ptr< ::arm_navigation_msgs::SimplePoseConstraint> SimplePoseConstraintPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::SimplePoseConstraint const> SimplePoseConstraintConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3483d830eb84ecd3059741fd417b30da";
  }

  static const char* value(const  ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3483d830eb84ecd3ULL;
  static const uint64_t static_value2 = 0x059741fd417b30daULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/SimplePoseConstraint";
  }

  static const char* value(const  ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the definition of a simple pose constraint \n\
# that specifies the pose for a particular link of the robot and corresponding\n\
# (absolute) position and orientation tolerances\n\
\n\
# The standard ROS message header\n\
Header header\n\
\n\
# The robot link this constraint refers to\n\
string link_name\n\
\n\
# The desired position of the robot link\n\
geometry_msgs/Pose pose\n\
\n\
# Position (absolute) tolerance\n\
geometry_msgs/Point absolute_position_tolerance\n\
\n\
# Orientation (absolute) tolerance\n\
float64 absolute_roll_tolerance\n\
float64 absolute_yaw_tolerance\n\
float64 absolute_pitch_tolerance\n\
\n\
int32 orientation_constraint_type\n\
int32 HEADER_FRAME=0\n\
int32 LINK_FRAME=1\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.link_name);
    stream.next(m.pose);
    stream.next(m.absolute_position_tolerance);
    stream.next(m.absolute_roll_tolerance);
    stream.next(m.absolute_yaw_tolerance);
    stream.next(m.absolute_pitch_tolerance);
    stream.next(m.orientation_constraint_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SimplePoseConstraint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::SimplePoseConstraint_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_name);
    s << indent << "pose: ";
s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "absolute_position_tolerance: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.absolute_position_tolerance);
    s << indent << "absolute_roll_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_roll_tolerance);
    s << indent << "absolute_yaw_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_yaw_tolerance);
    s << indent << "absolute_pitch_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_pitch_tolerance);
    s << indent << "orientation_constraint_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.orientation_constraint_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_SIMPLEPOSECONSTRAINT_H

