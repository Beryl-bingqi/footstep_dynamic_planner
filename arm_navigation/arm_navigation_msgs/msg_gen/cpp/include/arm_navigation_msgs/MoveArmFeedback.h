/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/MoveArmFeedback.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_MOVEARMFEEDBACK_H
#define ARM_NAVIGATION_MSGS_MESSAGE_MOVEARMFEEDBACK_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct MoveArmFeedback_ {
  typedef MoveArmFeedback_<ContainerAllocator> Type;

  MoveArmFeedback_()
  : state()
  , time_to_completion()
  {
  }

  MoveArmFeedback_(const ContainerAllocator& _alloc)
  : state(_alloc)
  , time_to_completion()
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _state_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  state;

  typedef ros::Duration _time_to_completion_type;
  ros::Duration time_to_completion;


  typedef boost::shared_ptr< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveArmFeedback
typedef  ::arm_navigation_msgs::MoveArmFeedback_<std::allocator<void> > MoveArmFeedback;

typedef boost::shared_ptr< ::arm_navigation_msgs::MoveArmFeedback> MoveArmFeedbackPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::MoveArmFeedback const> MoveArmFeedbackConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "321f3feadd0d5c1b7d7135738e673560";
  }

  static const char* value(const  ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x321f3feadd0d5c1bULL;
  static const uint64_t static_value2 = 0x7d7135738e673560ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/MoveArmFeedback";
  }

  static const char* value(const  ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# The internal state that the move arm action currently is in\n\
string state\n\
\n\
# Time to completion - this is a combination of requested planning time and trajectory completion time\n\
duration time_to_completion\n\
\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.state);
    stream.next(m.time_to_completion);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveArmFeedback_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::MoveArmFeedback_<ContainerAllocator> & v) 
  {
    s << indent << "state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.state);
    s << indent << "time_to_completion: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.time_to_completion);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_MOVEARMFEEDBACK_H

