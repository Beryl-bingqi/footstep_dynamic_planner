/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/WorkspaceParameters.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_WORKSPACEPARAMETERS_H
#define ARM_NAVIGATION_MSGS_MESSAGE_WORKSPACEPARAMETERS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/Shape.h"
#include "geometry_msgs/PoseStamped.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct WorkspaceParameters_ {
  typedef WorkspaceParameters_<ContainerAllocator> Type;

  WorkspaceParameters_()
  : workspace_region_shape()
  , workspace_region_pose()
  {
  }

  WorkspaceParameters_(const ContainerAllocator& _alloc)
  : workspace_region_shape(_alloc)
  , workspace_region_pose(_alloc)
  {
  }

  typedef  ::arm_navigation_msgs::Shape_<ContainerAllocator>  _workspace_region_shape_type;
   ::arm_navigation_msgs::Shape_<ContainerAllocator>  workspace_region_shape;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _workspace_region_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  workspace_region_pose;


  typedef boost::shared_ptr< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct WorkspaceParameters
typedef  ::arm_navigation_msgs::WorkspaceParameters_<std::allocator<void> > WorkspaceParameters;

typedef boost::shared_ptr< ::arm_navigation_msgs::WorkspaceParameters> WorkspaceParametersPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::WorkspaceParameters const> WorkspaceParametersConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1487490edff0df276863abf2cf221de5";
  }

  static const char* value(const  ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x1487490edff0df27ULL;
  static const uint64_t static_value2 = 0x6863abf2cf221de5ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/WorkspaceParameters";
  }

  static const char* value(const  ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains a set of parameters useful in\n\
# setting up the workspace for planning\n\
arm_navigation_msgs/Shape  workspace_region_shape\n\
geometry_msgs/PoseStamped    workspace_region_pose\n\
\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.workspace_region_shape);
    stream.next(m.workspace_region_pose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct WorkspaceParameters_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::WorkspaceParameters_<ContainerAllocator> & v) 
  {
    s << indent << "workspace_region_shape: ";
s << std::endl;
    Printer< ::arm_navigation_msgs::Shape_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace_region_shape);
    s << indent << "workspace_region_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.workspace_region_pose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_WORKSPACEPARAMETERS_H

