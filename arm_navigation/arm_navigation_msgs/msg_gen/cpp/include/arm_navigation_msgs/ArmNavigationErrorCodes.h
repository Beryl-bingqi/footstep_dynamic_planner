/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/ArmNavigationErrorCodes.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ARMNAVIGATIONERRORCODES_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ARMNAVIGATIONERRORCODES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct ArmNavigationErrorCodes_ {
  typedef ArmNavigationErrorCodes_<ContainerAllocator> Type;

  ArmNavigationErrorCodes_()
  : val(0)
  {
  }

  ArmNavigationErrorCodes_(const ContainerAllocator& _alloc)
  : val(0)
  {
  }

  typedef int32_t _val_type;
  int32_t val;

  enum { PLANNING_FAILED = -1 };
  enum { SUCCESS = 1 };
  enum { TIMED_OUT = -2 };
  enum { START_STATE_IN_COLLISION = -3 };
  enum { START_STATE_VIOLATES_PATH_CONSTRAINTS = -4 };
  enum { GOAL_IN_COLLISION = -5 };
  enum { GOAL_VIOLATES_PATH_CONSTRAINTS = -6 };
  enum { INVALID_ROBOT_STATE = -7 };
  enum { INCOMPLETE_ROBOT_STATE = -8 };
  enum { INVALID_PLANNER_ID = -9 };
  enum { INVALID_NUM_PLANNING_ATTEMPTS = -10 };
  enum { INVALID_ALLOWED_PLANNING_TIME = -11 };
  enum { INVALID_GROUP_NAME = -12 };
  enum { INVALID_GOAL_JOINT_CONSTRAINTS = -13 };
  enum { INVALID_GOAL_POSITION_CONSTRAINTS = -14 };
  enum { INVALID_GOAL_ORIENTATION_CONSTRAINTS = -15 };
  enum { INVALID_PATH_JOINT_CONSTRAINTS = -16 };
  enum { INVALID_PATH_POSITION_CONSTRAINTS = -17 };
  enum { INVALID_PATH_ORIENTATION_CONSTRAINTS = -18 };
  enum { INVALID_TRAJECTORY = -19 };
  enum { INVALID_INDEX = -20 };
  enum { JOINT_LIMITS_VIOLATED = -21 };
  enum { PATH_CONSTRAINTS_VIOLATED = -22 };
  enum { COLLISION_CONSTRAINTS_VIOLATED = -23 };
  enum { GOAL_CONSTRAINTS_VIOLATED = -24 };
  enum { JOINTS_NOT_MOVING = -25 };
  enum { TRAJECTORY_CONTROLLER_FAILED = -26 };
  enum { FRAME_TRANSFORM_FAILURE = -27 };
  enum { COLLISION_CHECKING_UNAVAILABLE = -28 };
  enum { ROBOT_STATE_STALE = -29 };
  enum { SENSOR_INFO_STALE = -30 };
  enum { NO_IK_SOLUTION = -31 };
  enum { INVALID_LINK_NAME = -32 };
  enum { IK_LINK_IN_COLLISION = -33 };
  enum { NO_FK_SOLUTION = -34 };
  enum { KINEMATICS_STATE_IN_COLLISION = -35 };
  enum { INVALID_TIMEOUT = -36 };

  typedef boost::shared_ptr< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ArmNavigationErrorCodes
typedef  ::arm_navigation_msgs::ArmNavigationErrorCodes_<std::allocator<void> > ArmNavigationErrorCodes;

typedef boost::shared_ptr< ::arm_navigation_msgs::ArmNavigationErrorCodes> ArmNavigationErrorCodesPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::ArmNavigationErrorCodes const> ArmNavigationErrorCodesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5acf26755415e1ec18a6d523028f204d";
  }

  static const char* value(const  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5acf26755415e1ecULL;
  static const uint64_t static_value2 = 0x18a6d523028f204dULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/ArmNavigationErrorCodes";
  }

  static const char* value(const  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 val\n\
\n\
# overall behavior\n\
int32 PLANNING_FAILED=-1\n\
int32 SUCCESS=1\n\
int32 TIMED_OUT=-2\n\
\n\
# start state errors\n\
int32 START_STATE_IN_COLLISION=-3\n\
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4\n\
\n\
# goal errors\n\
int32 GOAL_IN_COLLISION=-5\n\
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6\n\
\n\
# robot state\n\
int32 INVALID_ROBOT_STATE=-7\n\
int32 INCOMPLETE_ROBOT_STATE=-8\n\
\n\
# planning request errors\n\
int32 INVALID_PLANNER_ID=-9\n\
int32 INVALID_NUM_PLANNING_ATTEMPTS=-10\n\
int32 INVALID_ALLOWED_PLANNING_TIME=-11\n\
int32 INVALID_GROUP_NAME=-12\n\
int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13\n\
int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14\n\
int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15\n\
int32 INVALID_PATH_JOINT_CONSTRAINTS=-16\n\
int32 INVALID_PATH_POSITION_CONSTRAINTS=-17\n\
int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18\n\
\n\
# state/trajectory monitor errors\n\
int32 INVALID_TRAJECTORY=-19\n\
int32 INVALID_INDEX=-20\n\
int32 JOINT_LIMITS_VIOLATED=-21\n\
int32 PATH_CONSTRAINTS_VIOLATED=-22\n\
int32 COLLISION_CONSTRAINTS_VIOLATED=-23\n\
int32 GOAL_CONSTRAINTS_VIOLATED=-24\n\
int32 JOINTS_NOT_MOVING=-25\n\
int32 TRAJECTORY_CONTROLLER_FAILED=-26\n\
\n\
# system errors\n\
int32 FRAME_TRANSFORM_FAILURE=-27\n\
int32 COLLISION_CHECKING_UNAVAILABLE=-28\n\
int32 ROBOT_STATE_STALE=-29\n\
int32 SENSOR_INFO_STALE=-30\n\
\n\
# kinematics errors\n\
int32 NO_IK_SOLUTION=-31\n\
int32 INVALID_LINK_NAME=-32\n\
int32 IK_LINK_IN_COLLISION=-33\n\
int32 NO_FK_SOLUTION=-34\n\
int32 KINEMATICS_STATE_IN_COLLISION=-35\n\
\n\
# general errors\n\
int32 INVALID_TIMEOUT=-36\n\
\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.val);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ArmNavigationErrorCodes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator> & v) 
  {
    s << indent << "val: ";
    Printer<int32_t>::stream(s, indent + "  ", v.val);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ARMNAVIGATIONERRORCODES_H

