/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/Constraints.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_CONSTRAINTS_H
#define ARM_NAVIGATION_MSGS_MESSAGE_CONSTRAINTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/JointConstraint.h"
#include "arm_navigation_msgs/PositionConstraint.h"
#include "arm_navigation_msgs/OrientationConstraint.h"
#include "arm_navigation_msgs/VisibilityConstraint.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct Constraints_ {
  typedef Constraints_<ContainerAllocator> Type;

  Constraints_()
  : joint_constraints()
  , position_constraints()
  , orientation_constraints()
  , visibility_constraints()
  {
  }

  Constraints_(const ContainerAllocator& _alloc)
  : joint_constraints(_alloc)
  , position_constraints(_alloc)
  , orientation_constraints(_alloc)
  , visibility_constraints(_alloc)
  {
  }

  typedef std::vector< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >::other >  _joint_constraints_type;
  std::vector< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >::other >  joint_constraints;

  typedef std::vector< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >::other >  _position_constraints_type;
  std::vector< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >::other >  position_constraints;

  typedef std::vector< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >::other >  _orientation_constraints_type;
  std::vector< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >::other >  orientation_constraints;

  typedef std::vector< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >::other >  _visibility_constraints_type;
  std::vector< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >::other >  visibility_constraints;


  typedef boost::shared_ptr< ::arm_navigation_msgs::Constraints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::Constraints_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Constraints
typedef  ::arm_navigation_msgs::Constraints_<std::allocator<void> > Constraints;

typedef boost::shared_ptr< ::arm_navigation_msgs::Constraints> ConstraintsPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::Constraints const> ConstraintsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::Constraints_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::Constraints_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::Constraints_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::Constraints_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::Constraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "fe6b6f09c687fd46c05a2de4ca18378a";
  }

  static const char* value(const  ::arm_navigation_msgs::Constraints_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xfe6b6f09c687fd46ULL;
  static const uint64_t static_value2 = 0xc05a2de4ca18378aULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::Constraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/Constraints";
  }

  static const char* value(const  ::arm_navigation_msgs::Constraints_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::Constraints_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains a list of motion planning constraints.\n\
\n\
arm_navigation_msgs/JointConstraint[] joint_constraints\n\
arm_navigation_msgs/PositionConstraint[] position_constraints\n\
arm_navigation_msgs/OrientationConstraint[] orientation_constraints\n\
arm_navigation_msgs/VisibilityConstraint[] visibility_constraints\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/JointConstraint\n\
# Constrain the position of a joint to be within a certain bound\n\
string joint_name\n\
\n\
# the bound to be achieved is [position - tolerance_below, position + tolerance_above]\n\
float64 position\n\
float64 tolerance_above\n\
float64 tolerance_below\n\
\n\
# A weighting factor for this constraint\n\
float64 weight\n\
================================================================================\n\
MSG: arm_navigation_msgs/PositionConstraint\n\
# This message contains the definition of a position constraint.\n\
Header header\n\
\n\
# The robot link this constraint refers to\n\
string link_name\n\
\n\
# The offset (in the link frame) for the target point on the link we are planning for\n\
geometry_msgs/Point target_point_offset\n\
\n\
# The nominal/target position for the point we are planning for\n\
geometry_msgs/Point position\n\
\n\
# The shape of the bounded region that constrains the position of the end-effector\n\
# This region is always centered at the position defined above\n\
arm_navigation_msgs/Shape constraint_region_shape\n\
\n\
# The orientation of the bounded region that constrains the position of the end-effector. \n\
# This allows the specification of non-axis aligned constraints\n\
geometry_msgs/Quaternion constraint_region_orientation\n\
\n\
# Constraint weighting factor - a weight for this constraint\n\
float64 weight\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/OrientationConstraint\n\
# This message contains the definition of an orientation constraint.\n\
Header header\n\
\n\
# The robot link this constraint refers to\n\
string link_name\n\
\n\
# The type of the constraint\n\
int32 type\n\
int32 LINK_FRAME=0\n\
int32 HEADER_FRAME=1\n\
\n\
# The desired orientation of the robot link specified as a quaternion\n\
geometry_msgs/Quaternion orientation\n\
\n\
# optional RPY error tolerances specified if \n\
float64 absolute_roll_tolerance\n\
float64 absolute_pitch_tolerance\n\
float64 absolute_yaw_tolerance\n\
\n\
# Constraint weighting factor - a weight for this constraint\n\
float64 weight\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/VisibilityConstraint\n\
# This message contains the definition of a visibility constraint.\n\
Header header\n\
\n\
# The point stamped target that needs to be kept within view of the sensor\n\
geometry_msgs/PointStamped target\n\
\n\
# The local pose of the frame in which visibility is to be maintained\n\
# The frame id should represent the robot link to which the sensor is attached\n\
# The visual axis of the sensor is assumed to be along the X axis of this frame\n\
geometry_msgs/PoseStamped sensor_pose\n\
\n\
# The deviation (in radians) that will be tolerated\n\
# Constraint error will be measured as the solid angle between the \n\
# X axis of the frame defined above and the vector between the origin \n\
# of the frame defined above and the target location\n\
float64 absolute_tolerance\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::Constraints_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::Constraints_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_constraints);
    stream.next(m.position_constraints);
    stream.next(m.orientation_constraints);
    stream.next(m.visibility_constraints);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Constraints_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::Constraints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::Constraints_<ContainerAllocator> & v) 
  {
    s << indent << "joint_constraints[]" << std::endl;
    for (size_t i = 0; i < v.joint_constraints.size(); ++i)
    {
      s << indent << "  joint_constraints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >::stream(s, indent + "    ", v.joint_constraints[i]);
    }
    s << indent << "position_constraints[]" << std::endl;
    for (size_t i = 0; i < v.position_constraints.size(); ++i)
    {
      s << indent << "  position_constraints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >::stream(s, indent + "    ", v.position_constraints[i]);
    }
    s << indent << "orientation_constraints[]" << std::endl;
    for (size_t i = 0; i < v.orientation_constraints.size(); ++i)
    {
      s << indent << "  orientation_constraints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >::stream(s, indent + "    ", v.orientation_constraints[i]);
    }
    s << indent << "visibility_constraints[]" << std::endl;
    for (size_t i = 0; i < v.visibility_constraints.size(); ++i)
    {
      s << indent << "  visibility_constraints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >::stream(s, indent + "    ", v.visibility_constraints[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_CONSTRAINTS_H

