/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/RobotState.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ROBOTSTATE_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ROBOTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/JointState.h"
#include "arm_navigation_msgs/MultiDOFJointState.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct RobotState_ {
  typedef RobotState_<ContainerAllocator> Type;

  RobotState_()
  : joint_state()
  , multi_dof_joint_state()
  {
  }

  RobotState_(const ContainerAllocator& _alloc)
  : joint_state(_alloc)
  , multi_dof_joint_state(_alloc)
  {
  }

  typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _joint_state_type;
   ::sensor_msgs::JointState_<ContainerAllocator>  joint_state;

  typedef  ::arm_navigation_msgs::MultiDOFJointState_<ContainerAllocator>  _multi_dof_joint_state_type;
   ::arm_navigation_msgs::MultiDOFJointState_<ContainerAllocator>  multi_dof_joint_state;


  typedef boost::shared_ptr< ::arm_navigation_msgs::RobotState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::RobotState_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotState
typedef  ::arm_navigation_msgs::RobotState_<std::allocator<void> > RobotState;

typedef boost::shared_ptr< ::arm_navigation_msgs::RobotState> RobotStatePtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::RobotState const> RobotStateConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::RobotState_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::RobotState_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::RobotState_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::RobotState_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::RobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "970d46b2ca41b9686adbdaeb592d97a7";
  }

  static const char* value(const  ::arm_navigation_msgs::RobotState_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x970d46b2ca41b968ULL;
  static const uint64_t static_value2 = 0x6adbdaeb592d97a7ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::RobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/RobotState";
  }

  static const char* value(const  ::arm_navigation_msgs::RobotState_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::RobotState_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains information about the robot state, i.e. the positions of its joints and links\n\
sensor_msgs/JointState joint_state\n\
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointState\n\
#A representation of a multi-dof joint state\n\
time stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::RobotState_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_state);
    stream.next(m.multi_dof_joint_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotState_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::RobotState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::RobotState_<ContainerAllocator> & v) 
  {
    s << indent << "joint_state: ";
s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_state);
    s << indent << "multi_dof_joint_state: ";
s << std::endl;
    Printer< ::arm_navigation_msgs::MultiDOFJointState_<ContainerAllocator> >::stream(s, indent + "  ", v.multi_dof_joint_state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ROBOTSTATE_H

