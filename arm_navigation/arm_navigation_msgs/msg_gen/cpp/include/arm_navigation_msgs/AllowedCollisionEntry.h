/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/AllowedCollisionEntry.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONENTRY_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONENTRY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct AllowedCollisionEntry_ {
  typedef AllowedCollisionEntry_<ContainerAllocator> Type;

  AllowedCollisionEntry_()
  : enabled()
  {
  }

  AllowedCollisionEntry_(const ContainerAllocator& _alloc)
  : enabled(_alloc)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _enabled_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  enabled;


  typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AllowedCollisionEntry
typedef  ::arm_navigation_msgs::AllowedCollisionEntry_<std::allocator<void> > AllowedCollisionEntry;

typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionEntry> AllowedCollisionEntryPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionEntry const> AllowedCollisionEntryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "90d1ae1850840724bb043562fe3285fc";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x90d1ae1850840724ULL;
  static const uint64_t static_value2 = 0xbb043562fe3285fcULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/AllowedCollisionEntry";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# whether or not collision checking is enabled\n\
bool[] enabled\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.enabled);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AllowedCollisionEntry_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> & v) 
  {
    s << indent << "enabled[]" << std::endl;
    for (size_t i = 0; i < v.enabled.size(); ++i)
    {
      s << indent << "  enabled[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.enabled[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONENTRY_H

