/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/CollisionOperation.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_COLLISIONOPERATION_H
#define ARM_NAVIGATION_MSGS_MESSAGE_COLLISIONOPERATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct CollisionOperation_ {
  typedef CollisionOperation_<ContainerAllocator> Type;

  CollisionOperation_()
  : object1()
  , object2()
  , penetration_distance(0.0)
  , operation(0)
  {
  }

  CollisionOperation_(const ContainerAllocator& _alloc)
  : object1(_alloc)
  , object2(_alloc)
  , penetration_distance(0.0)
  , operation(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  object2;

  typedef double _penetration_distance_type;
  double penetration_distance;

  typedef int32_t _operation_type;
  int32_t operation;

  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  COLLISION_SET_ALL;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  COLLISION_SET_OBJECTS;
  static const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  COLLISION_SET_ATTACHED_OBJECTS;
  enum { DISABLE = 0 };
  enum { ENABLE = 1 };

  typedef boost::shared_ptr< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CollisionOperation
typedef  ::arm_navigation_msgs::CollisionOperation_<std::allocator<void> > CollisionOperation;

typedef boost::shared_ptr< ::arm_navigation_msgs::CollisionOperation> CollisionOperationPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::CollisionOperation const> CollisionOperationConstPtr;

template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CollisionOperation_<ContainerAllocator>::COLLISION_SET_ALL = "\"all\"";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CollisionOperation_<ContainerAllocator>::COLLISION_SET_OBJECTS = "\"objects\"";
template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  CollisionOperation_<ContainerAllocator>::COLLISION_SET_ATTACHED_OBJECTS = "\"attached\"";

template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "e0cf3073b26bd86266c918a0c779f8a2";
  }

  static const char* value(const  ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xe0cf3073b26bd862ULL;
  static const uint64_t static_value2 = 0x66c918a0c779f8a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/CollisionOperation";
  }

  static const char* value(const  ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A definition of a collision operation\n\
# E.g. (\"gripper\",COLLISION_SET_ALL,ENABLE) will enable collisions \n\
# between the gripper and all objects in the collision space\n\
\n\
string object1\n\
string object2\n\
string COLLISION_SET_ALL=\"all\"\n\
string COLLISION_SET_OBJECTS=\"objects\"\n\
string COLLISION_SET_ATTACHED_OBJECTS=\"attached\"\n\
\n\
# The penetration distance to which collisions are allowed. This is 0.0 by default.\n\
float64 penetration_distance\n\
\n\
# Flag that determines whether collisions will be enabled or disabled for the pair of objects specified above\n\
int32 operation\n\
int32 DISABLE=0\n\
int32 ENABLE=1\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.object1);
    stream.next(m.object2);
    stream.next(m.penetration_distance);
    stream.next(m.operation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CollisionOperation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> & v) 
  {
    s << indent << "object1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object1);
    s << indent << "object2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object2);
    s << indent << "penetration_distance: ";
    Printer<double>::stream(s, indent + "  ", v.penetration_distance);
    s << indent << "operation: ";
    Printer<int32_t>::stream(s, indent + "  ", v.operation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_COLLISIONOPERATION_H

