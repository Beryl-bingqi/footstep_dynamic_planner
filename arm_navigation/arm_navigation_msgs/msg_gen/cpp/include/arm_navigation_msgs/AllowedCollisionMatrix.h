/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/AllowedCollisionMatrix.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONMATRIX_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONMATRIX_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/AllowedCollisionEntry.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct AllowedCollisionMatrix_ {
  typedef AllowedCollisionMatrix_<ContainerAllocator> Type;

  AllowedCollisionMatrix_()
  : link_names()
  , entries()
  {
  }

  AllowedCollisionMatrix_(const ContainerAllocator& _alloc)
  : link_names(_alloc)
  , entries(_alloc)
  {
  }

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _link_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  link_names;

  typedef std::vector< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >::other >  _entries_type;
  std::vector< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >::other >  entries;


  typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AllowedCollisionMatrix
typedef  ::arm_navigation_msgs::AllowedCollisionMatrix_<std::allocator<void> > AllowedCollisionMatrix;

typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionMatrix> AllowedCollisionMatrixPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::AllowedCollisionMatrix const> AllowedCollisionMatrixConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c5785d58d2d0b6270738f65222dbec5d";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc5785d58d2d0b627ULL;
  static const uint64_t static_value2 = 0x0738f65222dbec5dULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/AllowedCollisionMatrix";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# the list of link names in the matrix\n\
string[] link_names\n\
\n\
# the individual entries in the allowed collision matrix\n\
# symmetric, with same order as link_names\n\
AllowedCollisionEntry[] entries\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/AllowedCollisionEntry\n\
# whether or not collision checking is enabled\n\
bool[] enabled\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.link_names);
    stream.next(m.entries);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AllowedCollisionMatrix_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::AllowedCollisionMatrix_<ContainerAllocator> & v) 
  {
    s << indent << "link_names[]" << std::endl;
    for (size_t i = 0; i < v.link_names.size(); ++i)
    {
      s << indent << "  link_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_names[i]);
    }
    s << indent << "entries[]" << std::endl;
    for (size_t i = 0; i < v.entries.size(); ++i)
    {
      s << indent << "  entries[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::AllowedCollisionEntry_<ContainerAllocator> >::stream(s, indent + "    ", v.entries[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ALLOWEDCOLLISIONMATRIX_H

