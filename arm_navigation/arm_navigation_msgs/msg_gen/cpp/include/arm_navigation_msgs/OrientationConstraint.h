/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/OrientationConstraint.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ORIENTATIONCONSTRAINT_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ORIENTATIONCONSTRAINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Quaternion.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct OrientationConstraint_ {
  typedef OrientationConstraint_<ContainerAllocator> Type;

  OrientationConstraint_()
  : header()
  , link_name()
  , type(0)
  , orientation()
  , absolute_roll_tolerance(0.0)
  , absolute_pitch_tolerance(0.0)
  , absolute_yaw_tolerance(0.0)
  , weight(0.0)
  {
  }

  OrientationConstraint_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , link_name(_alloc)
  , type(0)
  , orientation(_alloc)
  , absolute_roll_tolerance(0.0)
  , absolute_pitch_tolerance(0.0)
  , absolute_yaw_tolerance(0.0)
  , weight(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  link_name;

  typedef int32_t _type_type;
  int32_t type;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  orientation;

  typedef double _absolute_roll_tolerance_type;
  double absolute_roll_tolerance;

  typedef double _absolute_pitch_tolerance_type;
  double absolute_pitch_tolerance;

  typedef double _absolute_yaw_tolerance_type;
  double absolute_yaw_tolerance;

  typedef double _weight_type;
  double weight;

  enum { LINK_FRAME = 0 };
  enum { HEADER_FRAME = 1 };

  typedef boost::shared_ptr< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct OrientationConstraint
typedef  ::arm_navigation_msgs::OrientationConstraint_<std::allocator<void> > OrientationConstraint;

typedef boost::shared_ptr< ::arm_navigation_msgs::OrientationConstraint> OrientationConstraintPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::OrientationConstraint const> OrientationConstraintConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "27d99749ba49d4a822298bbd1e0988ba";
  }

  static const char* value(const  ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x27d99749ba49d4a8ULL;
  static const uint64_t static_value2 = 0x22298bbd1e0988baULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/OrientationConstraint";
  }

  static const char* value(const  ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the definition of an orientation constraint.\n\
Header header\n\
\n\
# The robot link this constraint refers to\n\
string link_name\n\
\n\
# The type of the constraint\n\
int32 type\n\
int32 LINK_FRAME=0\n\
int32 HEADER_FRAME=1\n\
\n\
# The desired orientation of the robot link specified as a quaternion\n\
geometry_msgs/Quaternion orientation\n\
\n\
# optional RPY error tolerances specified if \n\
float64 absolute_roll_tolerance\n\
float64 absolute_pitch_tolerance\n\
float64 absolute_yaw_tolerance\n\
\n\
# Constraint weighting factor - a weight for this constraint\n\
float64 weight\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.link_name);
    stream.next(m.type);
    stream.next(m.orientation);
    stream.next(m.absolute_roll_tolerance);
    stream.next(m.absolute_pitch_tolerance);
    stream.next(m.absolute_yaw_tolerance);
    stream.next(m.weight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct OrientationConstraint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::OrientationConstraint_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_name);
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "orientation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
    s << indent << "absolute_roll_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_roll_tolerance);
    s << indent << "absolute_pitch_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_pitch_tolerance);
    s << indent << "absolute_yaw_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_yaw_tolerance);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ORIENTATIONCONSTRAINT_H

