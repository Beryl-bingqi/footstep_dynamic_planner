/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/DisplayTrajectory.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_DISPLAYTRAJECTORY_H
#define ARM_NAVIGATION_MSGS_MESSAGE_DISPLAYTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/RobotTrajectory.h"
#include "arm_navigation_msgs/RobotState.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct DisplayTrajectory_ {
  typedef DisplayTrajectory_<ContainerAllocator> Type;

  DisplayTrajectory_()
  : model_id()
  , trajectory()
  , robot_state()
  {
  }

  DisplayTrajectory_(const ContainerAllocator& _alloc)
  : model_id(_alloc)
  , trajectory(_alloc)
  , robot_state(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _model_id_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  model_id;

  typedef  ::arm_navigation_msgs::RobotTrajectory_<ContainerAllocator>  _trajectory_type;
   ::arm_navigation_msgs::RobotTrajectory_<ContainerAllocator>  trajectory;

  typedef  ::arm_navigation_msgs::RobotState_<ContainerAllocator>  _robot_state_type;
   ::arm_navigation_msgs::RobotState_<ContainerAllocator>  robot_state;


  typedef boost::shared_ptr< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DisplayTrajectory
typedef  ::arm_navigation_msgs::DisplayTrajectory_<std::allocator<void> > DisplayTrajectory;

typedef boost::shared_ptr< ::arm_navigation_msgs::DisplayTrajectory> DisplayTrajectoryPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::DisplayTrajectory const> DisplayTrajectoryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "382f217803665e4718c4edbac445582c";
  }

  static const char* value(const  ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x382f217803665e47ULL;
  static const uint64_t static_value2 = 0x18c4edbac445582cULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/DisplayTrajectory";
  }

  static const char* value(const  ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The model id for which this path has been generated\n\
string model_id\n\
# The representation of the path contains position values for all the joints that are moving along the path\n\
arm_navigation_msgs/RobotTrajectory trajectory\n\
# The robot state is used to obtain positions for all/some of the joints of the robot. \n\
# It is used by the path display node to determine the positions of the joints that are not specified in the joint path message above. \n\
# If the robot state message contains joint position information for joints that are also mentioned in the joint path message, the positions in the joint path message will overwrite the positions specified in the robot state message. \n\
RobotState robot_state\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/RobotTrajectory\n\
trajectory_msgs/JointTrajectory joint_trajectory\n\
arm_navigation_msgs/MultiDOFJointTrajectory multi_dof_joint_trajectory\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectory\n\
Header header\n\
string[] joint_names\n\
JointTrajectoryPoint[] points\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: trajectory_msgs/JointTrajectoryPoint\n\
float64[] positions\n\
float64[] velocities\n\
float64[] accelerations\n\
duration time_from_start\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointTrajectory\n\
#A representation of a multi-dof joint trajectory\n\
duration stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
MultiDOFJointTrajectoryPoint[] points\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointTrajectoryPoint\n\
geometry_msgs/Pose[] poses\n\
duration time_from_start\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/RobotState\n\
# This message contains information about the robot state, i.e. the positions of its joints and links\n\
sensor_msgs/JointState joint_state\n\
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointState\n\
#A representation of a multi-dof joint state\n\
time stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
geometry_msgs/Pose[] poses\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.model_id);
    stream.next(m.trajectory);
    stream.next(m.robot_state);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DisplayTrajectory_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::DisplayTrajectory_<ContainerAllocator> & v) 
  {
    s << indent << "model_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.model_id);
    s << indent << "trajectory: ";
s << std::endl;
    Printer< ::arm_navigation_msgs::RobotTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "robot_state: ";
s << std::endl;
    Printer< ::arm_navigation_msgs::RobotState_<ContainerAllocator> >::stream(s, indent + "  ", v.robot_state);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_DISPLAYTRAJECTORY_H

