/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/PositionConstraint.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_POSITIONCONSTRAINT_H
#define ARM_NAVIGATION_MSGS_MESSAGE_POSITIONCONSTRAINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Point.h"
#include "arm_navigation_msgs/Shape.h"
#include "geometry_msgs/Quaternion.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct PositionConstraint_ {
  typedef PositionConstraint_<ContainerAllocator> Type;

  PositionConstraint_()
  : header()
  , link_name()
  , target_point_offset()
  , position()
  , constraint_region_shape()
  , constraint_region_orientation()
  , weight(0.0)
  {
  }

  PositionConstraint_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , link_name(_alloc)
  , target_point_offset(_alloc)
  , position(_alloc)
  , constraint_region_shape(_alloc)
  , constraint_region_orientation(_alloc)
  , weight(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _link_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  link_name;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _target_point_offset_type;
   ::geometry_msgs::Point_<ContainerAllocator>  target_point_offset;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::arm_navigation_msgs::Shape_<ContainerAllocator>  _constraint_region_shape_type;
   ::arm_navigation_msgs::Shape_<ContainerAllocator>  constraint_region_shape;

  typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _constraint_region_orientation_type;
   ::geometry_msgs::Quaternion_<ContainerAllocator>  constraint_region_orientation;

  typedef double _weight_type;
  double weight;


  typedef boost::shared_ptr< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct PositionConstraint
typedef  ::arm_navigation_msgs::PositionConstraint_<std::allocator<void> > PositionConstraint;

typedef boost::shared_ptr< ::arm_navigation_msgs::PositionConstraint> PositionConstraintPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::PositionConstraint const> PositionConstraintConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7e3d9697e64b346b9d3cb7311bb88ccb";
  }

  static const char* value(const  ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x7e3d9697e64b346bULL;
  static const uint64_t static_value2 = 0x9d3cb7311bb88ccbULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/PositionConstraint";
  }

  static const char* value(const  ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the definition of a position constraint.\n\
Header header\n\
\n\
# The robot link this constraint refers to\n\
string link_name\n\
\n\
# The offset (in the link frame) for the target point on the link we are planning for\n\
geometry_msgs/Point target_point_offset\n\
\n\
# The nominal/target position for the point we are planning for\n\
geometry_msgs/Point position\n\
\n\
# The shape of the bounded region that constrains the position of the end-effector\n\
# This region is always centered at the position defined above\n\
arm_navigation_msgs/Shape constraint_region_shape\n\
\n\
# The orientation of the bounded region that constrains the position of the end-effector. \n\
# This allows the specification of non-axis aligned constraints\n\
geometry_msgs/Quaternion constraint_region_orientation\n\
\n\
# Constraint weighting factor - a weight for this constraint\n\
float64 weight\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.link_name);
    stream.next(m.target_point_offset);
    stream.next(m.position);
    stream.next(m.constraint_region_shape);
    stream.next(m.constraint_region_orientation);
    stream.next(m.weight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct PositionConstraint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::PositionConstraint_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.link_name);
    s << indent << "target_point_offset: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.target_point_offset);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "constraint_region_shape: ";
s << std::endl;
    Printer< ::arm_navigation_msgs::Shape_<ContainerAllocator> >::stream(s, indent + "  ", v.constraint_region_shape);
    s << indent << "constraint_region_orientation: ";
s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.constraint_region_orientation);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_POSITIONCONSTRAINT_H

