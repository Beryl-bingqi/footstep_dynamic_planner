/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/OrderedCollisionOperations.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_ORDEREDCOLLISIONOPERATIONS_H
#define ARM_NAVIGATION_MSGS_MESSAGE_ORDEREDCOLLISIONOPERATIONS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/CollisionOperation.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct OrderedCollisionOperations_ {
  typedef OrderedCollisionOperations_<ContainerAllocator> Type;

  OrderedCollisionOperations_()
  : collision_operations()
  {
  }

  OrderedCollisionOperations_(const ContainerAllocator& _alloc)
  : collision_operations(_alloc)
  {
  }

  typedef std::vector< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >::other >  _collision_operations_type;
  std::vector< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >::other >  collision_operations;


  typedef boost::shared_ptr< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct OrderedCollisionOperations
typedef  ::arm_navigation_msgs::OrderedCollisionOperations_<std::allocator<void> > OrderedCollisionOperations;

typedef boost::shared_ptr< ::arm_navigation_msgs::OrderedCollisionOperations> OrderedCollisionOperationsPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::OrderedCollisionOperations const> OrderedCollisionOperationsConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f171f973b185d4d0121795080114026a";
  }

  static const char* value(const  ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf171f973b185d4d0ULL;
  static const uint64_t static_value2 = 0x121795080114026aULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/OrderedCollisionOperations";
  }

  static const char* value(const  ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A set of collision operations that will be performed in the order they are specified\n\
CollisionOperation[] collision_operations\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionOperation\n\
# A definition of a collision operation\n\
# E.g. (\"gripper\",COLLISION_SET_ALL,ENABLE) will enable collisions \n\
# between the gripper and all objects in the collision space\n\
\n\
string object1\n\
string object2\n\
string COLLISION_SET_ALL=\"all\"\n\
string COLLISION_SET_OBJECTS=\"objects\"\n\
string COLLISION_SET_ATTACHED_OBJECTS=\"attached\"\n\
\n\
# The penetration distance to which collisions are allowed. This is 0.0 by default.\n\
float64 penetration_distance\n\
\n\
# Flag that determines whether collisions will be enabled or disabled for the pair of objects specified above\n\
int32 operation\n\
int32 DISABLE=0\n\
int32 ENABLE=1\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.collision_operations);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct OrderedCollisionOperations_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::OrderedCollisionOperations_<ContainerAllocator> & v) 
  {
    s << indent << "collision_operations[]" << std::endl;
    for (size_t i = 0; i < v.collision_operations.size(); ++i)
    {
      s << indent << "  collision_operations[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::CollisionOperation_<ContainerAllocator> >::stream(s, indent + "    ", v.collision_operations[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_ORDEREDCOLLISIONOPERATIONS_H

