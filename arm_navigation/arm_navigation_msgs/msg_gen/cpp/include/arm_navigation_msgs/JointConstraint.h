/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/JointConstraint.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_JOINTCONSTRAINT_H
#define ARM_NAVIGATION_MSGS_MESSAGE_JOINTCONSTRAINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct JointConstraint_ {
  typedef JointConstraint_<ContainerAllocator> Type;

  JointConstraint_()
  : joint_name()
  , position(0.0)
  , tolerance_above(0.0)
  , tolerance_below(0.0)
  , weight(0.0)
  {
  }

  JointConstraint_(const ContainerAllocator& _alloc)
  : joint_name(_alloc)
  , position(0.0)
  , tolerance_above(0.0)
  , tolerance_below(0.0)
  , weight(0.0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _joint_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  joint_name;

  typedef double _position_type;
  double position;

  typedef double _tolerance_above_type;
  double tolerance_above;

  typedef double _tolerance_below_type;
  double tolerance_below;

  typedef double _weight_type;
  double weight;


  typedef boost::shared_ptr< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct JointConstraint
typedef  ::arm_navigation_msgs::JointConstraint_<std::allocator<void> > JointConstraint;

typedef boost::shared_ptr< ::arm_navigation_msgs::JointConstraint> JointConstraintPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::JointConstraint const> JointConstraintConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c02a15146bec0ce13564807805b008f0";
  }

  static const char* value(const  ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc02a15146bec0ce1ULL;
  static const uint64_t static_value2 = 0x3564807805b008f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/JointConstraint";
  }

  static const char* value(const  ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Constrain the position of a joint to be within a certain bound\n\
string joint_name\n\
\n\
# the bound to be achieved is [position - tolerance_below, position + tolerance_above]\n\
float64 position\n\
float64 tolerance_above\n\
float64 tolerance_below\n\
\n\
# A weighting factor for this constraint\n\
float64 weight\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joint_name);
    stream.next(m.position);
    stream.next(m.tolerance_above);
    stream.next(m.tolerance_below);
    stream.next(m.weight);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct JointConstraint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::JointConstraint_<ContainerAllocator> & v) 
  {
    s << indent << "joint_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_name);
    s << indent << "position: ";
    Printer<double>::stream(s, indent + "  ", v.position);
    s << indent << "tolerance_above: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance_above);
    s << indent << "tolerance_below: ";
    Printer<double>::stream(s, indent + "  ", v.tolerance_below);
    s << indent << "weight: ";
    Printer<double>::stream(s, indent + "  ", v.weight);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_JOINTCONSTRAINT_H

