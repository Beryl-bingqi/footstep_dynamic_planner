/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/ContactInformation.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_CONTACTINFORMATION_H
#define ARM_NAVIGATION_MSGS_MESSAGE_CONTACTINFORMATION_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point.h"
#include "geometry_msgs/Vector3.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct ContactInformation_ {
  typedef ContactInformation_<ContainerAllocator> Type;

  ContactInformation_()
  : header()
  , position()
  , normal()
  , depth(0.0)
  , contact_body_1()
  , attached_body_1()
  , body_type_1(0)
  , contact_body_2()
  , attached_body_2()
  , body_type_2(0)
  {
  }

  ContactInformation_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , position(_alloc)
  , normal(_alloc)
  , depth(0.0)
  , contact_body_1(_alloc)
  , attached_body_1(_alloc)
  , body_type_1(0)
  , contact_body_2(_alloc)
  , attached_body_2(_alloc)
  , body_type_2(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
   ::geometry_msgs::Point_<ContainerAllocator>  position;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _normal_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  normal;

  typedef double _depth_type;
  double depth;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _contact_body_1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  contact_body_1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _attached_body_1_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  attached_body_1;

  typedef uint32_t _body_type_1_type;
  uint32_t body_type_1;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _contact_body_2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  contact_body_2;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _attached_body_2_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  attached_body_2;

  typedef uint32_t _body_type_2_type;
  uint32_t body_type_2;

  enum { ROBOT_LINK = 0 };
  enum { OBJECT = 1 };
  enum { ATTACHED_BODY = 2 };

  typedef boost::shared_ptr< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ContactInformation
typedef  ::arm_navigation_msgs::ContactInformation_<std::allocator<void> > ContactInformation;

typedef boost::shared_ptr< ::arm_navigation_msgs::ContactInformation> ContactInformationPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::ContactInformation const> ContactInformationConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "85f341c0166ad4e68b4421391bbd2e15";
  }

  static const char* value(const  ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x85f341c0166ad4e6ULL;
  static const uint64_t static_value2 = 0x8b4421391bbd2e15ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/ContactInformation";
  }

  static const char* value(const  ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Standard ROS header contains information \n\
# about the frame in which this \n\
# contact is specified\n\
Header header\n\
\n\
# Position of the contact point\n\
geometry_msgs/Point position\n\
\n\
# Normal corresponding to the contact point\n\
geometry_msgs/Vector3 normal \n\
\n\
# Depth of contact point\n\
float64 depth\n\
\n\
# Name of the first body that is in contact\n\
# This could be a link or a namespace that represents a body\n\
string contact_body_1\n\
string attached_body_1\n\
uint32 body_type_1\n\
\n\
# Name of the second body that is in contact\n\
# This could be a link or a namespace that represents a body\n\
string contact_body_2\n\
string attached_body_2\n\
uint32 body_type_2\n\
\n\
uint32 ROBOT_LINK=0\n\
uint32 OBJECT=1\n\
uint32 ATTACHED_BODY=2\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.position);
    stream.next(m.normal);
    stream.next(m.depth);
    stream.next(m.contact_body_1);
    stream.next(m.attached_body_1);
    stream.next(m.body_type_1);
    stream.next(m.contact_body_2);
    stream.next(m.attached_body_2);
    stream.next(m.body_type_2);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ContactInformation_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::ContactInformation_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position: ";
s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "normal: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.normal);
    s << indent << "depth: ";
    Printer<double>::stream(s, indent + "  ", v.depth);
    s << indent << "contact_body_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contact_body_1);
    s << indent << "attached_body_1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.attached_body_1);
    s << indent << "body_type_1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.body_type_1);
    s << indent << "contact_body_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.contact_body_2);
    s << indent << "attached_body_2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.attached_body_2);
    s << indent << "body_type_2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.body_type_2);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_CONTACTINFORMATION_H

