/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/MultiDOFJointTrajectory.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H
#define ARM_NAVIGATION_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "arm_navigation_msgs/MultiDOFJointTrajectoryPoint.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct MultiDOFJointTrajectory_ {
  typedef MultiDOFJointTrajectory_<ContainerAllocator> Type;

  MultiDOFJointTrajectory_()
  : stamp()
  , joint_names()
  , frame_ids()
  , child_frame_ids()
  , points()
  {
  }

  MultiDOFJointTrajectory_(const ContainerAllocator& _alloc)
  : stamp()
  , joint_names(_alloc)
  , frame_ids(_alloc)
  , child_frame_ids(_alloc)
  , points(_alloc)
  {
  }

  typedef ros::Duration _stamp_type;
  ros::Duration stamp;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  joint_names;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _frame_ids_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  frame_ids;

  typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _child_frame_ids_type;
  std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  child_frame_ids;

  typedef std::vector< ::arm_navigation_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> >::other >  _points_type;
  std::vector< ::arm_navigation_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> >::other >  points;


  typedef boost::shared_ptr< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MultiDOFJointTrajectory
typedef  ::arm_navigation_msgs::MultiDOFJointTrajectory_<std::allocator<void> > MultiDOFJointTrajectory;

typedef boost::shared_ptr< ::arm_navigation_msgs::MultiDOFJointTrajectory> MultiDOFJointTrajectoryPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::MultiDOFJointTrajectory const> MultiDOFJointTrajectoryConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "524f128fb0a65e2838b0e3e3f75207d0";
  }

  static const char* value(const  ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x524f128fb0a65e28ULL;
  static const uint64_t static_value2 = 0x38b0e3e3f75207d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/MultiDOFJointTrajectory";
  }

  static const char* value(const  ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> > {
  static const char* value() 
  {
    return "#A representation of a multi-dof joint trajectory\n\
duration stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
MultiDOFJointTrajectoryPoint[] points\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointTrajectoryPoint\n\
geometry_msgs/Pose[] poses\n\
duration time_from_start\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.joint_names);
    stream.next(m.frame_ids);
    stream.next(m.child_frame_ids);
    stream.next(m.points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MultiDOFJointTrajectory_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::MultiDOFJointTrajectory_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Duration>::stream(s, indent + "  ", v.stamp);
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "frame_ids[]" << std::endl;
    for (size_t i = 0; i < v.frame_ids.size(); ++i)
    {
      s << indent << "  frame_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_ids[i]);
    }
    s << indent << "child_frame_ids[]" << std::endl;
    for (size_t i = 0; i < v.child_frame_ids.size(); ++i)
    {
      s << indent << "  child_frame_ids[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_ids[i]);
    }
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::arm_navigation_msgs::MultiDOFJointTrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_MULTIDOFJOINTTRAJECTORY_H

