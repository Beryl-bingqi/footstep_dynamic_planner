/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/msg/VisibilityConstraint.msg */
#ifndef ARM_NAVIGATION_MSGS_MESSAGE_VISIBILITYCONSTRAINT_H
#define ARM_NAVIGATION_MSGS_MESSAGE_VISIBILITYCONSTRAINT_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/PointStamped.h"
#include "geometry_msgs/PoseStamped.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct VisibilityConstraint_ {
  typedef VisibilityConstraint_<ContainerAllocator> Type;

  VisibilityConstraint_()
  : header()
  , target()
  , sensor_pose()
  , absolute_tolerance(0.0)
  {
  }

  VisibilityConstraint_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , target(_alloc)
  , sensor_pose(_alloc)
  , absolute_tolerance(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::geometry_msgs::PointStamped_<ContainerAllocator>  _target_type;
   ::geometry_msgs::PointStamped_<ContainerAllocator>  target;

  typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _sensor_pose_type;
   ::geometry_msgs::PoseStamped_<ContainerAllocator>  sensor_pose;

  typedef double _absolute_tolerance_type;
  double absolute_tolerance;


  typedef boost::shared_ptr< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VisibilityConstraint
typedef  ::arm_navigation_msgs::VisibilityConstraint_<std::allocator<void> > VisibilityConstraint;

typedef boost::shared_ptr< ::arm_navigation_msgs::VisibilityConstraint> VisibilityConstraintPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::VisibilityConstraint const> VisibilityConstraintConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ab297b6588ea21c1a862067d8447cb08";
  }

  static const char* value(const  ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xab297b6588ea21c1ULL;
  static const uint64_t static_value2 = 0xa862067d8447cb08ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/VisibilityConstraint";
  }

  static const char* value(const  ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message contains the definition of a visibility constraint.\n\
Header header\n\
\n\
# The point stamped target that needs to be kept within view of the sensor\n\
geometry_msgs/PointStamped target\n\
\n\
# The local pose of the frame in which visibility is to be maintained\n\
# The frame id should represent the robot link to which the sensor is attached\n\
# The visual axis of the sensor is assumed to be along the X axis of this frame\n\
geometry_msgs/PoseStamped sensor_pose\n\
\n\
# The deviation (in radians) that will be tolerated\n\
# Constraint error will be measured as the solid angle between the \n\
# X axis of the frame defined above and the vector between the origin \n\
# of the frame defined above and the target location\n\
float64 absolute_tolerance\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PointStamped\n\
# This represents a Point with reference coordinate frame and timestamp\n\
Header header\n\
Point point\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/PoseStamped\n\
# A Pose with reference coordinate frame and timestamp\n\
Header header\n\
Pose pose\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.target);
    stream.next(m.sensor_pose);
    stream.next(m.absolute_tolerance);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VisibilityConstraint_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::arm_navigation_msgs::VisibilityConstraint_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "target: ";
s << std::endl;
    Printer< ::geometry_msgs::PointStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.target);
    s << indent << "sensor_pose: ";
s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.sensor_pose);
    s << indent << "absolute_tolerance: ";
    Printer<double>::stream(s, indent + "  ", v.absolute_tolerance);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_MESSAGE_VISIBILITYCONSTRAINT_H

