; Auto-generated. Do not edit!


(cl:in-package arm_navigation_msgs-msg)


;//! \htmlinclude MoveArmGoal.msg.html

(cl:defclass <MoveArmGoal> (roslisp-msg-protocol:ros-message)
  ((planner_service_name
    :reader planner_service_name
    :initarg :planner_service_name
    :type cl:string
    :initform "")
   (planning_scene_diff
    :reader planning_scene_diff
    :initarg :planning_scene_diff
    :type arm_navigation_msgs-msg:PlanningScene
    :initform (cl:make-instance 'arm_navigation_msgs-msg:PlanningScene))
   (motion_plan_request
    :reader motion_plan_request
    :initarg :motion_plan_request
    :type arm_navigation_msgs-msg:MotionPlanRequest
    :initform (cl:make-instance 'arm_navigation_msgs-msg:MotionPlanRequest))
   (operations
    :reader operations
    :initarg :operations
    :type arm_navigation_msgs-msg:OrderedCollisionOperations
    :initform (cl:make-instance 'arm_navigation_msgs-msg:OrderedCollisionOperations))
   (accept_partial_plans
    :reader accept_partial_plans
    :initarg :accept_partial_plans
    :type cl:boolean
    :initform cl:nil)
   (accept_invalid_goals
    :reader accept_invalid_goals
    :initarg :accept_invalid_goals
    :type cl:boolean
    :initform cl:nil)
   (disable_ik
    :reader disable_ik
    :initarg :disable_ik
    :type cl:boolean
    :initform cl:nil)
   (disable_collision_monitoring
    :reader disable_collision_monitoring
    :initarg :disable_collision_monitoring
    :type cl:boolean
    :initform cl:nil))
)

(cl:defclass MoveArmGoal (<MoveArmGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <MoveArmGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'MoveArmGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name arm_navigation_msgs-msg:<MoveArmGoal> is deprecated: use arm_navigation_msgs-msg:MoveArmGoal instead.")))

(cl:ensure-generic-function 'planner_service_name-val :lambda-list '(m))
(cl:defmethod planner_service_name-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:planner_service_name-val is deprecated.  Use arm_navigation_msgs-msg:planner_service_name instead.")
  (planner_service_name m))

(cl:ensure-generic-function 'planning_scene_diff-val :lambda-list '(m))
(cl:defmethod planning_scene_diff-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:planning_scene_diff-val is deprecated.  Use arm_navigation_msgs-msg:planning_scene_diff instead.")
  (planning_scene_diff m))

(cl:ensure-generic-function 'motion_plan_request-val :lambda-list '(m))
(cl:defmethod motion_plan_request-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:motion_plan_request-val is deprecated.  Use arm_navigation_msgs-msg:motion_plan_request instead.")
  (motion_plan_request m))

(cl:ensure-generic-function 'operations-val :lambda-list '(m))
(cl:defmethod operations-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:operations-val is deprecated.  Use arm_navigation_msgs-msg:operations instead.")
  (operations m))

(cl:ensure-generic-function 'accept_partial_plans-val :lambda-list '(m))
(cl:defmethod accept_partial_plans-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:accept_partial_plans-val is deprecated.  Use arm_navigation_msgs-msg:accept_partial_plans instead.")
  (accept_partial_plans m))

(cl:ensure-generic-function 'accept_invalid_goals-val :lambda-list '(m))
(cl:defmethod accept_invalid_goals-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:accept_invalid_goals-val is deprecated.  Use arm_navigation_msgs-msg:accept_invalid_goals instead.")
  (accept_invalid_goals m))

(cl:ensure-generic-function 'disable_ik-val :lambda-list '(m))
(cl:defmethod disable_ik-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:disable_ik-val is deprecated.  Use arm_navigation_msgs-msg:disable_ik instead.")
  (disable_ik m))

(cl:ensure-generic-function 'disable_collision_monitoring-val :lambda-list '(m))
(cl:defmethod disable_collision_monitoring-val ((m <MoveArmGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader arm_navigation_msgs-msg:disable_collision_monitoring-val is deprecated.  Use arm_navigation_msgs-msg:disable_collision_monitoring instead.")
  (disable_collision_monitoring m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <MoveArmGoal>) ostream)
  "Serializes a message object of type '<MoveArmGoal>"
  (cl:let ((__ros_str_len (cl:length (cl:slot-value msg 'planner_service_name))))
    (cl:write-byte (cl:ldb (cl:byte 8 0) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 8) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 16) __ros_str_len) ostream)
    (cl:write-byte (cl:ldb (cl:byte 8 24) __ros_str_len) ostream))
  (cl:map cl:nil #'(cl:lambda (c) (cl:write-byte (cl:char-code c) ostream)) (cl:slot-value msg 'planner_service_name))
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'planning_scene_diff) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'motion_plan_request) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'operations) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'accept_partial_plans) 1 0)) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'accept_invalid_goals) 1 0)) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'disable_ik) 1 0)) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'disable_collision_monitoring) 1 0)) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <MoveArmGoal>) istream)
  "Deserializes a message object of type '<MoveArmGoal>"
    (cl:let ((__ros_str_len 0))
      (cl:setf (cl:ldb (cl:byte 8 0) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 8) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 16) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:ldb (cl:byte 8 24) __ros_str_len) (cl:read-byte istream))
      (cl:setf (cl:slot-value msg 'planner_service_name) (cl:make-string __ros_str_len))
      (cl:dotimes (__ros_str_idx __ros_str_len msg)
        (cl:setf (cl:char (cl:slot-value msg 'planner_service_name) __ros_str_idx) (cl:code-char (cl:read-byte istream)))))
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'planning_scene_diff) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'motion_plan_request) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'operations) istream)
    (cl:setf (cl:slot-value msg 'accept_partial_plans) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:setf (cl:slot-value msg 'accept_invalid_goals) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:setf (cl:slot-value msg 'disable_ik) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:setf (cl:slot-value msg 'disable_collision_monitoring) (cl:not (cl:zerop (cl:read-byte istream))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<MoveArmGoal>)))
  "Returns string type for a message object of type '<MoveArmGoal>"
  "arm_navigation_msgs/MoveArmGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'MoveArmGoal)))
  "Returns string type for a message object of type 'MoveArmGoal"
  "arm_navigation_msgs/MoveArmGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<MoveArmGoal>)))
  "Returns md5sum for a message object of type '<MoveArmGoal>"
  "229373059043ad35d3ceeb2161f005d6")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'MoveArmGoal)))
  "Returns md5sum for a message object of type 'MoveArmGoal"
  "229373059043ad35d3ceeb2161f005d6")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<MoveArmGoal>)))
  "Returns full string definition for message of type '<MoveArmGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Service name to call for getting a motion plan~%# Move arm will call a service on this service name ~%# using the MotionPlanRequest specified here~%string planner_service_name~%~%# A planning scene diff~%PlanningScene planning_scene_diff~%~%# A motion planning request~%MotionPlanRequest motion_plan_request~%~%# OPTIONAL: Diff uses ordered collision operations in addition to allowed_collision_matrix~%arm_navigation_msgs/OrderedCollisionOperations operations~%~%# OPTIONAL flag~%# Setting this flag to true will allow move_arm to accept plans that do not go all the way to the goal~%bool accept_partial_plans~%~%# OPTIONAL flag~%# Setting this flag to true will allow move_arm to accept invalid goals~%# This is useful if you are using a planner like CHOMP along with a noisy rapidly changing collision map~%# and you would like to plan to a goal near an object.~%bool accept_invalid_goals~%~%# OPTIONAL flag~%# Setting this flag to true will disable the call to IK for a pose goal~%bool disable_ik~%~%# OPTIONAL flag~%# Setting this flag to true will disable collision monitoring during execution of a trajectory~%bool disable_collision_monitoring~%~%================================================================================~%MSG: arm_navigation_msgs/PlanningScene~%#full robot state~%arm_navigation_msgs/RobotState robot_state~%~%#additional frames for duplicating tf~%geometry_msgs/TransformStamped[] fixed_frame_transforms~%~%#full allowed collision matrix~%AllowedCollisionMatrix allowed_collision_matrix~%~%#allowed contacts~%arm_navigation_msgs/AllowedContactSpecification[] allowed_contacts~%~%#all link paddings~%arm_navigation_msgs/LinkPadding[] link_padding~%~%#collision objects~%arm_navigation_msgs/CollisionObject[] collision_objects~%arm_navigation_msgs/AttachedCollisionObject[] attached_collision_objects~%~%#the collision map~%arm_navigation_msgs/CollisionMap collision_map~%~%================================================================================~%MSG: arm_navigation_msgs/RobotState~%# This message contains information about the robot state, i.e. the positions of its joints and links~%sensor_msgs/JointState joint_state~%arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: arm_navigation_msgs/MultiDOFJointState~%#A representation of a multi-dof joint state~%time stamp~%string[] joint_names~%string[] frame_ids~%string[] child_frame_ids~%geometry_msgs/Pose[] poses~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of postion and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: geometry_msgs/TransformStamped~%# This expresses a transform from coordinate frame header.frame_id~%# to the coordinate frame child_frame_id~%#~%# This message is mostly used by the ~%# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. ~%# See it's documentation for more information.~%~%Header header~%string child_frame_id # the frame id of the child frame~%Transform transform~%~%================================================================================~%MSG: geometry_msgs/Transform~%# This represents the transform between two coordinate frames in free space.~%~%Vector3 translation~%Quaternion rotation~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: arm_navigation_msgs/AllowedCollisionMatrix~%# the list of link names in the matrix~%string[] link_names~%~%# the individual entries in the allowed collision matrix~%# symmetric, with same order as link_names~%AllowedCollisionEntry[] entries~%~%================================================================================~%MSG: arm_navigation_msgs/AllowedCollisionEntry~%# whether or not collision checking is enabled~%bool[] enabled~%~%================================================================================~%MSG: arm_navigation_msgs/AllowedContactSpecification~%# The names of the regions~%string name~%~%# The shape of the region in the environment~%arm_navigation_msgs/Shape shape~%~%# The pose of the space defining the region~%geometry_msgs/PoseStamped pose_stamped~%~%# The set of links that will be allowed to have penetration contact within this region~%string[] link_names~%~%# The maximum penetration depth allowed for every link~%float64 penetration_depth~%~%================================================================================~%MSG: arm_navigation_msgs/Shape~%byte SPHERE=0~%byte BOX=1~%byte CYLINDER=2~%byte MESH=3~%~%byte type~%~%~%#### define sphere, box, cylinder ####~%# the origin of each shape is considered at the shape's center~%~%# for sphere~%# radius := dimensions[0]~%~%# for cylinder~%# radius := dimensions[0]~%# length := dimensions[1]~%# the length is along the Z axis~%~%# for box~%# size_x := dimensions[0]~%# size_y := dimensions[1]~%# size_z := dimensions[2]~%float64[] dimensions~%~%~%#### define mesh ####~%~%# list of triangles; triangle k is defined by tre vertices located~%# at indices triangles[3k], triangles[3k+1], triangles[3k+2]~%int32[] triangles~%geometry_msgs/Point[] vertices~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: arm_navigation_msgs/LinkPadding~%#name for the link~%string link_name~%~%# padding to apply to the link~%float64 padding~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionObject~%# a header, used for interpreting the poses~%Header header~%~%# the id of the object~%string id~%~%# The padding used for filtering points near the object.~%# This does not affect collision checking for the object.  ~%# Set to negative to get zero padding.~%float32 padding~%~%#This contains what is to be done with the object~%CollisionObjectOperation operation~%~%#the shapes associated with the object~%arm_navigation_msgs/Shape[] shapes~%~%#the poses associated with the shapes - will be transformed using the header~%geometry_msgs/Pose[] poses~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionObjectOperation~%#Puts the object into the environment~%#or updates the object if already added~%byte ADD=0~%~%#Removes the object from the environment entirely~%byte REMOVE=1~%~%#Only valid within the context of a CollisionAttachedObject message~%#Will be ignored if sent with an CollisionObject message~%#Takes an attached object, detaches from the attached link~%#But adds back in as regular object~%byte DETACH_AND_ADD_AS_OBJECT=2~%~%#Only valid within the context of a CollisionAttachedObject message~%#Will be ignored if sent with an CollisionObject message~%#Takes current object in the environment and removes it as~%#a regular object~%byte ATTACH_AND_REMOVE_AS_OBJECT=3~%~%# Byte code for operation~%byte operation~%~%================================================================================~%MSG: arm_navigation_msgs/AttachedCollisionObject~%# The CollisionObject will be attached with a fixed joint to this link~%# If link name is set to REMOVE_ALL_ATTACHED_OBJECTS and object.operation ~%# is set to REMOVE will remove all attached bodies attached to any object~%string link_name~%~%#Reserved for indicating that all attached objects should be removed~%string REMOVE_ALL_ATTACHED_OBJECTS = \"all\"~%~%#This contains the actual shapes and poses for the CollisionObject~%#to be attached to the link~%#If action is remove and no object.id is set, all objects~%#attached to the link indicated by link_name will be removed~%CollisionObject object~%~%# The set of links that the attached objects are allowed to touch~%# by default - the link_name is included by default~%string[] touch_links~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionMap~%#header for interpreting box positions~%Header header~%~%#boxes for use in collision testing~%OrientedBoundingBox[] boxes~%~%================================================================================~%MSG: arm_navigation_msgs/OrientedBoundingBox~%#the center of the box~%geometry_msgs/Point32 center~%~%#the extents of the box, assuming the center is at the point~%geometry_msgs/Point32 extents~%~%#the axis of the box~%geometry_msgs/Point32 axis~%~%#the angle of rotation around the axis~%float32 angle~%~%================================================================================~%MSG: geometry_msgs/Point32~%# This contains the position of a point in free space(with 32 bits of precision).~%# It is recommeded to use Point wherever possible instead of Point32.  ~%# ~%# This recommendation is to promote interoperability.  ~%#~%# This message is designed to take up less space when sending~%# lots of points at once, as in the case of a PointCloud.  ~%~%float32 x~%float32 y~%float32 z~%================================================================================~%MSG: arm_navigation_msgs/MotionPlanRequest~%# This service contains the definition for a request to the motion~%# planner and the output it provides~%~%# Parameters for the workspace that the planner should work inside~%arm_navigation_msgs/WorkspaceParameters workspace_parameters~%~%# Starting state updates. If certain joints should be considered~%# at positions other than the current ones, these positions should~%# be set here~%arm_navigation_msgs/RobotState start_state~%~%# The goal state for the model to plan for. The goal is achieved~%# if all constraints are satisfied~%arm_navigation_msgs/Constraints goal_constraints~%~%# No state at any point along the path in the produced motion plan will violate these constraints~%arm_navigation_msgs/Constraints path_constraints~%~%# The name of the motion planner to use. If no name is specified,~%# a default motion planner will be used~%string planner_id~%~%# The name of the group of joints on which this planner is operating~%string group_name~%~%# The number of times this plan is to be computed. Shortest solution~%# will be reported.~%int32 num_planning_attempts~%~%# The maximum amount of time the motion planner is allowed to plan for~%duration allowed_planning_time~%~%# An expected path duration (in seconds) along with an expected discretization of the path allows the planner to determine the discretization of the trajectory that it returns~%duration expected_path_duration~%duration expected_path_dt~%~%================================================================================~%MSG: arm_navigation_msgs/WorkspaceParameters~%# This message contains a set of parameters useful in~%# setting up the workspace for planning~%arm_navigation_msgs/Shape  workspace_region_shape~%geometry_msgs/PoseStamped    workspace_region_pose~%~%~%================================================================================~%MSG: arm_navigation_msgs/Constraints~%# This message contains a list of motion planning constraints.~%~%arm_navigation_msgs/JointConstraint[] joint_constraints~%arm_navigation_msgs/PositionConstraint[] position_constraints~%arm_navigation_msgs/OrientationConstraint[] orientation_constraints~%arm_navigation_msgs/VisibilityConstraint[] visibility_constraints~%~%================================================================================~%MSG: arm_navigation_msgs/JointConstraint~%# Constrain the position of a joint to be within a certain bound~%string joint_name~%~%# the bound to be achieved is [position - tolerance_below, position + tolerance_above]~%float64 position~%float64 tolerance_above~%float64 tolerance_below~%~%# A weighting factor for this constraint~%float64 weight~%================================================================================~%MSG: arm_navigation_msgs/PositionConstraint~%# This message contains the definition of a position constraint.~%Header header~%~%# The robot link this constraint refers to~%string link_name~%~%# The offset (in the link frame) for the target point on the link we are planning for~%geometry_msgs/Point target_point_offset~%~%# The nominal/target position for the point we are planning for~%geometry_msgs/Point position~%~%# The shape of the bounded region that constrains the position of the end-effector~%# This region is always centered at the position defined above~%arm_navigation_msgs/Shape constraint_region_shape~%~%# The orientation of the bounded region that constrains the position of the end-effector. ~%# This allows the specification of non-axis aligned constraints~%geometry_msgs/Quaternion constraint_region_orientation~%~%# Constraint weighting factor - a weight for this constraint~%float64 weight~%~%================================================================================~%MSG: arm_navigation_msgs/OrientationConstraint~%# This message contains the definition of an orientation constraint.~%Header header~%~%# The robot link this constraint refers to~%string link_name~%~%# The type of the constraint~%int32 type~%int32 LINK_FRAME=0~%int32 HEADER_FRAME=1~%~%# The desired orientation of the robot link specified as a quaternion~%geometry_msgs/Quaternion orientation~%~%# optional RPY error tolerances specified if ~%float64 absolute_roll_tolerance~%float64 absolute_pitch_tolerance~%float64 absolute_yaw_tolerance~%~%# Constraint weighting factor - a weight for this constraint~%float64 weight~%~%================================================================================~%MSG: arm_navigation_msgs/VisibilityConstraint~%# This message contains the definition of a visibility constraint.~%Header header~%~%# The point stamped target that needs to be kept within view of the sensor~%geometry_msgs/PointStamped target~%~%# The local pose of the frame in which visibility is to be maintained~%# The frame id should represent the robot link to which the sensor is attached~%# The visual axis of the sensor is assumed to be along the X axis of this frame~%geometry_msgs/PoseStamped sensor_pose~%~%# The deviation (in radians) that will be tolerated~%# Constraint error will be measured as the solid angle between the ~%# X axis of the frame defined above and the vector between the origin ~%# of the frame defined above and the target location~%float64 absolute_tolerance~%~%~%================================================================================~%MSG: geometry_msgs/PointStamped~%# This represents a Point with reference coordinate frame and timestamp~%Header header~%Point point~%~%================================================================================~%MSG: arm_navigation_msgs/OrderedCollisionOperations~%# A set of collision operations that will be performed in the order they are specified~%CollisionOperation[] collision_operations~%================================================================================~%MSG: arm_navigation_msgs/CollisionOperation~%# A definition of a collision operation~%# E.g. (\"gripper\",COLLISION_SET_ALL,ENABLE) will enable collisions ~%# between the gripper and all objects in the collision space~%~%string object1~%string object2~%string COLLISION_SET_ALL=\"all\"~%string COLLISION_SET_OBJECTS=\"objects\"~%string COLLISION_SET_ATTACHED_OBJECTS=\"attached\"~%~%# The penetration distance to which collisions are allowed. This is 0.0 by default.~%float64 penetration_distance~%~%# Flag that determines whether collisions will be enabled or disabled for the pair of objects specified above~%int32 operation~%int32 DISABLE=0~%int32 ENABLE=1~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'MoveArmGoal)))
  "Returns full string definition for message of type 'MoveArmGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# Service name to call for getting a motion plan~%# Move arm will call a service on this service name ~%# using the MotionPlanRequest specified here~%string planner_service_name~%~%# A planning scene diff~%PlanningScene planning_scene_diff~%~%# A motion planning request~%MotionPlanRequest motion_plan_request~%~%# OPTIONAL: Diff uses ordered collision operations in addition to allowed_collision_matrix~%arm_navigation_msgs/OrderedCollisionOperations operations~%~%# OPTIONAL flag~%# Setting this flag to true will allow move_arm to accept plans that do not go all the way to the goal~%bool accept_partial_plans~%~%# OPTIONAL flag~%# Setting this flag to true will allow move_arm to accept invalid goals~%# This is useful if you are using a planner like CHOMP along with a noisy rapidly changing collision map~%# and you would like to plan to a goal near an object.~%bool accept_invalid_goals~%~%# OPTIONAL flag~%# Setting this flag to true will disable the call to IK for a pose goal~%bool disable_ik~%~%# OPTIONAL flag~%# Setting this flag to true will disable collision monitoring during execution of a trajectory~%bool disable_collision_monitoring~%~%================================================================================~%MSG: arm_navigation_msgs/PlanningScene~%#full robot state~%arm_navigation_msgs/RobotState robot_state~%~%#additional frames for duplicating tf~%geometry_msgs/TransformStamped[] fixed_frame_transforms~%~%#full allowed collision matrix~%AllowedCollisionMatrix allowed_collision_matrix~%~%#allowed contacts~%arm_navigation_msgs/AllowedContactSpecification[] allowed_contacts~%~%#all link paddings~%arm_navigation_msgs/LinkPadding[] link_padding~%~%#collision objects~%arm_navigation_msgs/CollisionObject[] collision_objects~%arm_navigation_msgs/AttachedCollisionObject[] attached_collision_objects~%~%#the collision map~%arm_navigation_msgs/CollisionMap collision_map~%~%================================================================================~%MSG: arm_navigation_msgs/RobotState~%# This message contains information about the robot state, i.e. the positions of its joints and links~%sensor_msgs/JointState joint_state~%arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.secs: seconds (stamp_secs) since epoch~%# * stamp.nsecs: nanoseconds since stamp_secs~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%# 0: no frame~%# 1: global frame~%string frame_id~%~%================================================================================~%MSG: arm_navigation_msgs/MultiDOFJointState~%#A representation of a multi-dof joint state~%time stamp~%string[] joint_names~%string[] frame_ids~%string[] child_frame_ids~%geometry_msgs/Pose[] poses~%~%================================================================================~%MSG: geometry_msgs/Pose~%# A representation of pose in free space, composed of postion and orientation. ~%Point position~%Quaternion orientation~%~%================================================================================~%MSG: geometry_msgs/Point~%# This contains the position of a point in free space~%float64 x~%float64 y~%float64 z~%~%================================================================================~%MSG: geometry_msgs/Quaternion~%# This represents an orientation in free space in quaternion form.~%~%float64 x~%float64 y~%float64 z~%float64 w~%~%================================================================================~%MSG: geometry_msgs/TransformStamped~%# This expresses a transform from coordinate frame header.frame_id~%# to the coordinate frame child_frame_id~%#~%# This message is mostly used by the ~%# <a href=\"http://www.ros.org/wiki/tf\">tf</a> package. ~%# See it's documentation for more information.~%~%Header header~%string child_frame_id # the frame id of the child frame~%Transform transform~%~%================================================================================~%MSG: geometry_msgs/Transform~%# This represents the transform between two coordinate frames in free space.~%~%Vector3 translation~%Quaternion rotation~%~%================================================================================~%MSG: geometry_msgs/Vector3~%# This represents a vector in free space. ~%~%float64 x~%float64 y~%float64 z~%================================================================================~%MSG: arm_navigation_msgs/AllowedCollisionMatrix~%# the list of link names in the matrix~%string[] link_names~%~%# the individual entries in the allowed collision matrix~%# symmetric, with same order as link_names~%AllowedCollisionEntry[] entries~%~%================================================================================~%MSG: arm_navigation_msgs/AllowedCollisionEntry~%# whether or not collision checking is enabled~%bool[] enabled~%~%================================================================================~%MSG: arm_navigation_msgs/AllowedContactSpecification~%# The names of the regions~%string name~%~%# The shape of the region in the environment~%arm_navigation_msgs/Shape shape~%~%# The pose of the space defining the region~%geometry_msgs/PoseStamped pose_stamped~%~%# The set of links that will be allowed to have penetration contact within this region~%string[] link_names~%~%# The maximum penetration depth allowed for every link~%float64 penetration_depth~%~%================================================================================~%MSG: arm_navigation_msgs/Shape~%byte SPHERE=0~%byte BOX=1~%byte CYLINDER=2~%byte MESH=3~%~%byte type~%~%~%#### define sphere, box, cylinder ####~%# the origin of each shape is considered at the shape's center~%~%# for sphere~%# radius := dimensions[0]~%~%# for cylinder~%# radius := dimensions[0]~%# length := dimensions[1]~%# the length is along the Z axis~%~%# for box~%# size_x := dimensions[0]~%# size_y := dimensions[1]~%# size_z := dimensions[2]~%float64[] dimensions~%~%~%#### define mesh ####~%~%# list of triangles; triangle k is defined by tre vertices located~%# at indices triangles[3k], triangles[3k+1], triangles[3k+2]~%int32[] triangles~%geometry_msgs/Point[] vertices~%~%================================================================================~%MSG: geometry_msgs/PoseStamped~%# A Pose with reference coordinate frame and timestamp~%Header header~%Pose pose~%~%================================================================================~%MSG: arm_navigation_msgs/LinkPadding~%#name for the link~%string link_name~%~%# padding to apply to the link~%float64 padding~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionObject~%# a header, used for interpreting the poses~%Header header~%~%# the id of the object~%string id~%~%# The padding used for filtering points near the object.~%# This does not affect collision checking for the object.  ~%# Set to negative to get zero padding.~%float32 padding~%~%#This contains what is to be done with the object~%CollisionObjectOperation operation~%~%#the shapes associated with the object~%arm_navigation_msgs/Shape[] shapes~%~%#the poses associated with the shapes - will be transformed using the header~%geometry_msgs/Pose[] poses~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionObjectOperation~%#Puts the object into the environment~%#or updates the object if already added~%byte ADD=0~%~%#Removes the object from the environment entirely~%byte REMOVE=1~%~%#Only valid within the context of a CollisionAttachedObject message~%#Will be ignored if sent with an CollisionObject message~%#Takes an attached object, detaches from the attached link~%#But adds back in as regular object~%byte DETACH_AND_ADD_AS_OBJECT=2~%~%#Only valid within the context of a CollisionAttachedObject message~%#Will be ignored if sent with an CollisionObject message~%#Takes current object in the environment and removes it as~%#a regular object~%byte ATTACH_AND_REMOVE_AS_OBJECT=3~%~%# Byte code for operation~%byte operation~%~%================================================================================~%MSG: arm_navigation_msgs/AttachedCollisionObject~%# The CollisionObject will be attached with a fixed joint to this link~%# If link name is set to REMOVE_ALL_ATTACHED_OBJECTS and object.operation ~%# is set to REMOVE will remove all attached bodies attached to any object~%string link_name~%~%#Reserved for indicating that all attached objects should be removed~%string REMOVE_ALL_ATTACHED_OBJECTS = \"all\"~%~%#This contains the actual shapes and poses for the CollisionObject~%#to be attached to the link~%#If action is remove and no object.id is set, all objects~%#attached to the link indicated by link_name will be removed~%CollisionObject object~%~%# The set of links that the attached objects are allowed to touch~%# by default - the link_name is included by default~%string[] touch_links~%~%================================================================================~%MSG: arm_navigation_msgs/CollisionMap~%#header for interpreting box positions~%Header header~%~%#boxes for use in collision testing~%OrientedBoundingBox[] boxes~%~%================================================================================~%MSG: arm_navigation_msgs/OrientedBoundingBox~%#the center of the box~%geometry_msgs/Point32 center~%~%#the extents of the box, assuming the center is at the point~%geometry_msgs/Point32 extents~%~%#the axis of the box~%geometry_msgs/Point32 axis~%~%#the angle of rotation around the axis~%float32 angle~%~%================================================================================~%MSG: geometry_msgs/Point32~%# This contains the position of a point in free space(with 32 bits of precision).~%# It is recommeded to use Point wherever possible instead of Point32.  ~%# ~%# This recommendation is to promote interoperability.  ~%#~%# This message is designed to take up less space when sending~%# lots of points at once, as in the case of a PointCloud.  ~%~%float32 x~%float32 y~%float32 z~%================================================================================~%MSG: arm_navigation_msgs/MotionPlanRequest~%# This service contains the definition for a request to the motion~%# planner and the output it provides~%~%# Parameters for the workspace that the planner should work inside~%arm_navigation_msgs/WorkspaceParameters workspace_parameters~%~%# Starting state updates. If certain joints should be considered~%# at positions other than the current ones, these positions should~%# be set here~%arm_navigation_msgs/RobotState start_state~%~%# The goal state for the model to plan for. The goal is achieved~%# if all constraints are satisfied~%arm_navigation_msgs/Constraints goal_constraints~%~%# No state at any point along the path in the produced motion plan will violate these constraints~%arm_navigation_msgs/Constraints path_constraints~%~%# The name of the motion planner to use. If no name is specified,~%# a default motion planner will be used~%string planner_id~%~%# The name of the group of joints on which this planner is operating~%string group_name~%~%# The number of times this plan is to be computed. Shortest solution~%# will be reported.~%int32 num_planning_attempts~%~%# The maximum amount of time the motion planner is allowed to plan for~%duration allowed_planning_time~%~%# An expected path duration (in seconds) along with an expected discretization of the path allows the planner to determine the discretization of the trajectory that it returns~%duration expected_path_duration~%duration expected_path_dt~%~%================================================================================~%MSG: arm_navigation_msgs/WorkspaceParameters~%# This message contains a set of parameters useful in~%# setting up the workspace for planning~%arm_navigation_msgs/Shape  workspace_region_shape~%geometry_msgs/PoseStamped    workspace_region_pose~%~%~%================================================================================~%MSG: arm_navigation_msgs/Constraints~%# This message contains a list of motion planning constraints.~%~%arm_navigation_msgs/JointConstraint[] joint_constraints~%arm_navigation_msgs/PositionConstraint[] position_constraints~%arm_navigation_msgs/OrientationConstraint[] orientation_constraints~%arm_navigation_msgs/VisibilityConstraint[] visibility_constraints~%~%================================================================================~%MSG: arm_navigation_msgs/JointConstraint~%# Constrain the position of a joint to be within a certain bound~%string joint_name~%~%# the bound to be achieved is [position - tolerance_below, position + tolerance_above]~%float64 position~%float64 tolerance_above~%float64 tolerance_below~%~%# A weighting factor for this constraint~%float64 weight~%================================================================================~%MSG: arm_navigation_msgs/PositionConstraint~%# This message contains the definition of a position constraint.~%Header header~%~%# The robot link this constraint refers to~%string link_name~%~%# The offset (in the link frame) for the target point on the link we are planning for~%geometry_msgs/Point target_point_offset~%~%# The nominal/target position for the point we are planning for~%geometry_msgs/Point position~%~%# The shape of the bounded region that constrains the position of the end-effector~%# This region is always centered at the position defined above~%arm_navigation_msgs/Shape constraint_region_shape~%~%# The orientation of the bounded region that constrains the position of the end-effector. ~%# This allows the specification of non-axis aligned constraints~%geometry_msgs/Quaternion constraint_region_orientation~%~%# Constraint weighting factor - a weight for this constraint~%float64 weight~%~%================================================================================~%MSG: arm_navigation_msgs/OrientationConstraint~%# This message contains the definition of an orientation constraint.~%Header header~%~%# The robot link this constraint refers to~%string link_name~%~%# The type of the constraint~%int32 type~%int32 LINK_FRAME=0~%int32 HEADER_FRAME=1~%~%# The desired orientation of the robot link specified as a quaternion~%geometry_msgs/Quaternion orientation~%~%# optional RPY error tolerances specified if ~%float64 absolute_roll_tolerance~%float64 absolute_pitch_tolerance~%float64 absolute_yaw_tolerance~%~%# Constraint weighting factor - a weight for this constraint~%float64 weight~%~%================================================================================~%MSG: arm_navigation_msgs/VisibilityConstraint~%# This message contains the definition of a visibility constraint.~%Header header~%~%# The point stamped target that needs to be kept within view of the sensor~%geometry_msgs/PointStamped target~%~%# The local pose of the frame in which visibility is to be maintained~%# The frame id should represent the robot link to which the sensor is attached~%# The visual axis of the sensor is assumed to be along the X axis of this frame~%geometry_msgs/PoseStamped sensor_pose~%~%# The deviation (in radians) that will be tolerated~%# Constraint error will be measured as the solid angle between the ~%# X axis of the frame defined above and the vector between the origin ~%# of the frame defined above and the target location~%float64 absolute_tolerance~%~%~%================================================================================~%MSG: geometry_msgs/PointStamped~%# This represents a Point with reference coordinate frame and timestamp~%Header header~%Point point~%~%================================================================================~%MSG: arm_navigation_msgs/OrderedCollisionOperations~%# A set of collision operations that will be performed in the order they are specified~%CollisionOperation[] collision_operations~%================================================================================~%MSG: arm_navigation_msgs/CollisionOperation~%# A definition of a collision operation~%# E.g. (\"gripper\",COLLISION_SET_ALL,ENABLE) will enable collisions ~%# between the gripper and all objects in the collision space~%~%string object1~%string object2~%string COLLISION_SET_ALL=\"all\"~%string COLLISION_SET_OBJECTS=\"objects\"~%string COLLISION_SET_ATTACHED_OBJECTS=\"attached\"~%~%# The penetration distance to which collisions are allowed. This is 0.0 by default.~%float64 penetration_distance~%~%# Flag that determines whether collisions will be enabled or disabled for the pair of objects specified above~%int32 operation~%int32 DISABLE=0~%int32 ENABLE=1~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <MoveArmGoal>))
  (cl:+ 0
     4 (cl:length (cl:slot-value msg 'planner_service_name))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'planning_scene_diff))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'motion_plan_request))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'operations))
     1
     1
     1
     1
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <MoveArmGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'MoveArmGoal
    (cl:cons ':planner_service_name (planner_service_name msg))
    (cl:cons ':planning_scene_diff (planning_scene_diff msg))
    (cl:cons ':motion_plan_request (motion_plan_request msg))
    (cl:cons ':operations (operations msg))
    (cl:cons ':accept_partial_plans (accept_partial_plans msg))
    (cl:cons ':accept_invalid_goals (accept_invalid_goals msg))
    (cl:cons ':disable_ik (disable_ik msg))
    (cl:cons ':disable_collision_monitoring (disable_collision_monitoring msg))
))
