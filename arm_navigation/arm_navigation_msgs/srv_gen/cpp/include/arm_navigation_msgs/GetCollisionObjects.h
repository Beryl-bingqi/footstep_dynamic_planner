/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/srv/GetCollisionObjects.srv */
#ifndef ARM_NAVIGATION_MSGS_SERVICE_GETCOLLISIONOBJECTS_H
#define ARM_NAVIGATION_MSGS_SERVICE_GETCOLLISIONOBJECTS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "arm_navigation_msgs/CollisionMap.h"
#include "arm_navigation_msgs/CollisionObject.h"
#include "arm_navigation_msgs/AttachedCollisionObject.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct GetCollisionObjectsRequest_ {
  typedef GetCollisionObjectsRequest_<ContainerAllocator> Type;

  GetCollisionObjectsRequest_()
  : include_points(false)
  {
  }

  GetCollisionObjectsRequest_(const ContainerAllocator& _alloc)
  : include_points(false)
  {
  }

  typedef uint8_t _include_points_type;
  uint8_t include_points;


  typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetCollisionObjectsRequest
typedef  ::arm_navigation_msgs::GetCollisionObjectsRequest_<std::allocator<void> > GetCollisionObjectsRequest;

typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsRequest> GetCollisionObjectsRequestPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsRequest const> GetCollisionObjectsRequestConstPtr;


template <class ContainerAllocator>
struct GetCollisionObjectsResponse_ {
  typedef GetCollisionObjectsResponse_<ContainerAllocator> Type;

  GetCollisionObjectsResponse_()
  : points()
  , collision_objects()
  , attached_collision_objects()
  {
  }

  GetCollisionObjectsResponse_(const ContainerAllocator& _alloc)
  : points(_alloc)
  , collision_objects(_alloc)
  , attached_collision_objects(_alloc)
  {
  }

  typedef  ::arm_navigation_msgs::CollisionMap_<ContainerAllocator>  _points_type;
   ::arm_navigation_msgs::CollisionMap_<ContainerAllocator>  points;

  typedef std::vector< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> >::other >  _collision_objects_type;
  std::vector< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::CollisionObject_<ContainerAllocator> >::other >  collision_objects;

  typedef std::vector< ::arm_navigation_msgs::AttachedCollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::AttachedCollisionObject_<ContainerAllocator> >::other >  _attached_collision_objects_type;
  std::vector< ::arm_navigation_msgs::AttachedCollisionObject_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::arm_navigation_msgs::AttachedCollisionObject_<ContainerAllocator> >::other >  attached_collision_objects;


  typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetCollisionObjectsResponse
typedef  ::arm_navigation_msgs::GetCollisionObjectsResponse_<std::allocator<void> > GetCollisionObjectsResponse;

typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsResponse> GetCollisionObjectsResponsePtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::GetCollisionObjectsResponse const> GetCollisionObjectsResponseConstPtr;

struct GetCollisionObjects
{

typedef GetCollisionObjectsRequest Request;
typedef GetCollisionObjectsResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetCollisionObjects
} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "3ae7288b23c84452d229e442c1673708";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x3ae7288b23c84452ULL;
  static const uint64_t static_value2 = 0xd229e442c1673708ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetCollisionObjectsRequest";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
bool include_points\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c361b849f4eb74ea667a930b0b9dc801";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc361b849f4eb74eaULL;
  static const uint64_t static_value2 = 0x667a930b0b9dc801ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetCollisionObjectsResponse";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
arm_navigation_msgs/CollisionMap points\n\
\n\
arm_navigation_msgs/CollisionObject[] collision_objects\n\
\n\
arm_navigation_msgs/AttachedCollisionObject[] attached_collision_objects\n\
\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionMap\n\
#header for interpreting box positions\n\
Header header\n\
\n\
#boxes for use in collision testing\n\
OrientedBoundingBox[] boxes\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/OrientedBoundingBox\n\
#the center of the box\n\
geometry_msgs/Point32 center\n\
\n\
#the extents of the box, assuming the center is at the point\n\
geometry_msgs/Point32 extents\n\
\n\
#the axis of the box\n\
geometry_msgs/Point32 axis\n\
\n\
#the angle of rotation around the axis\n\
float32 angle\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObject\n\
# a header, used for interpreting the poses\n\
Header header\n\
\n\
# the id of the object\n\
string id\n\
\n\
# The padding used for filtering points near the object.\n\
# This does not affect collision checking for the object.  \n\
# Set to negative to get zero padding.\n\
float32 padding\n\
\n\
#This contains what is to be done with the object\n\
CollisionObjectOperation operation\n\
\n\
#the shapes associated with the object\n\
arm_navigation_msgs/Shape[] shapes\n\
\n\
#the poses associated with the shapes - will be transformed using the header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/CollisionObjectOperation\n\
#Puts the object into the environment\n\
#or updates the object if already added\n\
byte ADD=0\n\
\n\
#Removes the object from the environment entirely\n\
byte REMOVE=1\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes an attached object, detaches from the attached link\n\
#But adds back in as regular object\n\
byte DETACH_AND_ADD_AS_OBJECT=2\n\
\n\
#Only valid within the context of a CollisionAttachedObject message\n\
#Will be ignored if sent with an CollisionObject message\n\
#Takes current object in the environment and removes it as\n\
#a regular object\n\
byte ATTACH_AND_REMOVE_AS_OBJECT=3\n\
\n\
# Byte code for operation\n\
byte operation\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/Shape\n\
byte SPHERE=0\n\
byte BOX=1\n\
byte CYLINDER=2\n\
byte MESH=3\n\
\n\
byte type\n\
\n\
\n\
#### define sphere, box, cylinder ####\n\
# the origin of each shape is considered at the shape's center\n\
\n\
# for sphere\n\
# radius := dimensions[0]\n\
\n\
# for cylinder\n\
# radius := dimensions[0]\n\
# length := dimensions[1]\n\
# the length is along the Z axis\n\
\n\
# for box\n\
# size_x := dimensions[0]\n\
# size_y := dimensions[1]\n\
# size_z := dimensions[2]\n\
float64[] dimensions\n\
\n\
\n\
#### define mesh ####\n\
\n\
# list of triangles; triangle k is defined by tre vertices located\n\
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]\n\
int32[] triangles\n\
geometry_msgs/Point[] vertices\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/AttachedCollisionObject\n\
# The CollisionObject will be attached with a fixed joint to this link\n\
# If link name is set to REMOVE_ALL_ATTACHED_OBJECTS and object.operation \n\
# is set to REMOVE will remove all attached bodies attached to any object\n\
string link_name\n\
\n\
#Reserved for indicating that all attached objects should be removed\n\
string REMOVE_ALL_ATTACHED_OBJECTS = \"all\"\n\
\n\
#This contains the actual shapes and poses for the CollisionObject\n\
#to be attached to the link\n\
#If action is remove and no object.id is set, all objects\n\
#attached to the link indicated by link_name will be removed\n\
CollisionObject object\n\
\n\
# The set of links that the attached objects are allowed to touch\n\
# by default - the link_name is included by default\n\
string[] touch_links\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.include_points);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetCollisionObjectsRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.points);
    stream.next(m.collision_objects);
    stream.next(m.attached_collision_objects);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetCollisionObjectsResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<arm_navigation_msgs::GetCollisionObjects> {
  static const char* value() 
  {
    return "8a4f57995c7be09c22ca01de6eb557ac";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjects&) { return value(); } 
};

template<>
struct DataType<arm_navigation_msgs::GetCollisionObjects> {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetCollisionObjects";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjects&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a4f57995c7be09c22ca01de6eb557ac";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetCollisionObjects";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjectsRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8a4f57995c7be09c22ca01de6eb557ac";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetCollisionObjects";
  }

  static const char* value(const arm_navigation_msgs::GetCollisionObjectsResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_SERVICE_GETCOLLISIONOBJECTS_H

