/* Auto-generated by genmsg_cpp for file /home/beryl/fuerte_workspace/sandbox/humanoid_navigation_ros/arm_navigation/arm_navigation_msgs/srv/GetRobotState.srv */
#ifndef ARM_NAVIGATION_MSGS_SERVICE_GETROBOTSTATE_H
#define ARM_NAVIGATION_MSGS_SERVICE_GETROBOTSTATE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "arm_navigation_msgs/RobotState.h"
#include "arm_navigation_msgs/ArmNavigationErrorCodes.h"

namespace arm_navigation_msgs
{
template <class ContainerAllocator>
struct GetRobotStateRequest_ {
  typedef GetRobotStateRequest_<ContainerAllocator> Type;

  GetRobotStateRequest_()
  {
  }

  GetRobotStateRequest_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetRobotStateRequest
typedef  ::arm_navigation_msgs::GetRobotStateRequest_<std::allocator<void> > GetRobotStateRequest;

typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateRequest> GetRobotStateRequestPtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateRequest const> GetRobotStateRequestConstPtr;


template <class ContainerAllocator>
struct GetRobotStateResponse_ {
  typedef GetRobotStateResponse_<ContainerAllocator> Type;

  GetRobotStateResponse_()
  : robot_state()
  , error_code()
  {
  }

  GetRobotStateResponse_(const ContainerAllocator& _alloc)
  : robot_state(_alloc)
  , error_code(_alloc)
  {
  }

  typedef  ::arm_navigation_msgs::RobotState_<ContainerAllocator>  _robot_state_type;
   ::arm_navigation_msgs::RobotState_<ContainerAllocator>  robot_state;

  typedef  ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  _error_code_type;
   ::arm_navigation_msgs::ArmNavigationErrorCodes_<ContainerAllocator>  error_code;


  typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct GetRobotStateResponse
typedef  ::arm_navigation_msgs::GetRobotStateResponse_<std::allocator<void> > GetRobotStateResponse;

typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateResponse> GetRobotStateResponsePtr;
typedef boost::shared_ptr< ::arm_navigation_msgs::GetRobotStateResponse const> GetRobotStateResponseConstPtr;

struct GetRobotState
{

typedef GetRobotStateRequest Request;
typedef GetRobotStateResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct GetRobotState
} // namespace arm_navigation_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetRobotStateRequest";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9799d82a26586bf3963962b7c3038f40";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9799d82a26586bf3ULL;
  static const uint64_t static_value2 = 0x963962b7c3038f40ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetRobotStateResponse";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
arm_navigation_msgs/RobotState robot_state\n\
\n\
\n\
\n\
\n\
arm_navigation_msgs/ArmNavigationErrorCodes error_code\n\
\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/RobotState\n\
# This message contains information about the robot state, i.e. the positions of its joints and links\n\
sensor_msgs/JointState joint_state\n\
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state\n\
\n\
================================================================================\n\
MSG: sensor_msgs/JointState\n\
# This is a message that holds data to describe the state of a set of torque controlled joints. \n\
#\n\
# The state of each joint (revolute or prismatic) is defined by:\n\
#  * the position of the joint (rad or m),\n\
#  * the velocity of the joint (rad/s or m/s) and \n\
#  * the effort that is applied in the joint (Nm or N).\n\
#\n\
# Each joint is uniquely identified by its name\n\
# The header specifies the time at which the joint states were recorded. All the joint states\n\
# in one message have to be recorded at the same time.\n\
#\n\
# This message consists of a multiple arrays, one for each part of the joint state. \n\
# The goal is to make each of the fields optional. When e.g. your joints have no\n\
# effort associated with them, you can leave the effort array empty. \n\
#\n\
# All arrays in this message should have the same size, or be empty.\n\
# This is the only way to uniquely associate the joint name with the correct\n\
# states.\n\
\n\
\n\
Header header\n\
\n\
string[] name\n\
float64[] position\n\
float64[] velocity\n\
float64[] effort\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/MultiDOFJointState\n\
#A representation of a multi-dof joint state\n\
time stamp\n\
string[] joint_names\n\
string[] frame_ids\n\
string[] child_frame_ids\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: arm_navigation_msgs/ArmNavigationErrorCodes\n\
int32 val\n\
\n\
# overall behavior\n\
int32 PLANNING_FAILED=-1\n\
int32 SUCCESS=1\n\
int32 TIMED_OUT=-2\n\
\n\
# start state errors\n\
int32 START_STATE_IN_COLLISION=-3\n\
int32 START_STATE_VIOLATES_PATH_CONSTRAINTS=-4\n\
\n\
# goal errors\n\
int32 GOAL_IN_COLLISION=-5\n\
int32 GOAL_VIOLATES_PATH_CONSTRAINTS=-6\n\
\n\
# robot state\n\
int32 INVALID_ROBOT_STATE=-7\n\
int32 INCOMPLETE_ROBOT_STATE=-8\n\
\n\
# planning request errors\n\
int32 INVALID_PLANNER_ID=-9\n\
int32 INVALID_NUM_PLANNING_ATTEMPTS=-10\n\
int32 INVALID_ALLOWED_PLANNING_TIME=-11\n\
int32 INVALID_GROUP_NAME=-12\n\
int32 INVALID_GOAL_JOINT_CONSTRAINTS=-13\n\
int32 INVALID_GOAL_POSITION_CONSTRAINTS=-14\n\
int32 INVALID_GOAL_ORIENTATION_CONSTRAINTS=-15\n\
int32 INVALID_PATH_JOINT_CONSTRAINTS=-16\n\
int32 INVALID_PATH_POSITION_CONSTRAINTS=-17\n\
int32 INVALID_PATH_ORIENTATION_CONSTRAINTS=-18\n\
\n\
# state/trajectory monitor errors\n\
int32 INVALID_TRAJECTORY=-19\n\
int32 INVALID_INDEX=-20\n\
int32 JOINT_LIMITS_VIOLATED=-21\n\
int32 PATH_CONSTRAINTS_VIOLATED=-22\n\
int32 COLLISION_CONSTRAINTS_VIOLATED=-23\n\
int32 GOAL_CONSTRAINTS_VIOLATED=-24\n\
int32 JOINTS_NOT_MOVING=-25\n\
int32 TRAJECTORY_CONTROLLER_FAILED=-26\n\
\n\
# system errors\n\
int32 FRAME_TRANSFORM_FAILURE=-27\n\
int32 COLLISION_CHECKING_UNAVAILABLE=-28\n\
int32 ROBOT_STATE_STALE=-29\n\
int32 SENSOR_INFO_STALE=-30\n\
\n\
# kinematics errors\n\
int32 NO_IK_SOLUTION=-31\n\
int32 INVALID_LINK_NAME=-32\n\
int32 IK_LINK_IN_COLLISION=-33\n\
int32 NO_FK_SOLUTION=-34\n\
int32 KINEMATICS_STATE_IN_COLLISION=-35\n\
\n\
# general errors\n\
int32 INVALID_TIMEOUT=-36\n\
\n\
\n\
";
  }

  static const char* value(const  ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetRobotStateRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.robot_state);
    stream.next(m.error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct GetRobotStateResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<arm_navigation_msgs::GetRobotState> {
  static const char* value() 
  {
    return "9799d82a26586bf3963962b7c3038f40";
  }

  static const char* value(const arm_navigation_msgs::GetRobotState&) { return value(); } 
};

template<>
struct DataType<arm_navigation_msgs::GetRobotState> {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetRobotState";
  }

  static const char* value(const arm_navigation_msgs::GetRobotState&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9799d82a26586bf3963962b7c3038f40";
  }

  static const char* value(const arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetRobotState";
  }

  static const char* value(const arm_navigation_msgs::GetRobotStateRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9799d82a26586bf3963962b7c3038f40";
  }

  static const char* value(const arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "arm_navigation_msgs/GetRobotState";
  }

  static const char* value(const arm_navigation_msgs::GetRobotStateResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // ARM_NAVIGATION_MSGS_SERVICE_GETROBOTSTATE_H

