"""autogenerated by genpy from arm_navigation_msgs/MotionPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_navigation_msgs.msg
import sensor_msgs.msg
import geometry_msgs.msg
import genpy
import std_msgs.msg

class MotionPlanRequest(genpy.Message):
  _md5sum = "75408e881303c6ad5069bd5df65ecb00"
  _type = "arm_navigation_msgs/MotionPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
arm_navigation_msgs/WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
arm_navigation_msgs/RobotState start_state

# The goal state for the model to plan for. The goal is achieved
# if all constraints are satisfied
arm_navigation_msgs/Constraints goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints
arm_navigation_msgs/Constraints path_constraints

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for
duration allowed_planning_time

# An expected path duration (in seconds) along with an expected discretization of the path allows the planner to determine the discretization of the trajectory that it returns
duration expected_path_duration
duration expected_path_dt

================================================================================
MSG: arm_navigation_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the workspace for planning
arm_navigation_msgs/Shape  workspace_region_shape
geometry_msgs/PoseStamped    workspace_region_pose


================================================================================
MSG: arm_navigation_msgs/Shape
byte SPHERE=0
byte BOX=1
byte CYLINDER=2
byte MESH=3

byte type


#### define sphere, box, cylinder ####
# the origin of each shape is considered at the shape's center

# for sphere
# radius := dimensions[0]

# for cylinder
# radius := dimensions[0]
# length := dimensions[1]
# the length is along the Z axis

# for box
# size_x := dimensions[0]
# size_y := dimensions[1]
# size_z := dimensions[2]
float64[] dimensions


#### define mesh ####

# list of triangles; triangle k is defined by tre vertices located
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]
int32[] triangles
geometry_msgs/Point[] vertices

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: arm_navigation_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: arm_navigation_msgs/MultiDOFJointState
#A representation of a multi-dof joint state
time stamp
string[] joint_names
string[] frame_ids
string[] child_frame_ids
geometry_msgs/Pose[] poses

================================================================================
MSG: arm_navigation_msgs/Constraints
# This message contains a list of motion planning constraints.

arm_navigation_msgs/JointConstraint[] joint_constraints
arm_navigation_msgs/PositionConstraint[] position_constraints
arm_navigation_msgs/OrientationConstraint[] orientation_constraints
arm_navigation_msgs/VisibilityConstraint[] visibility_constraints

================================================================================
MSG: arm_navigation_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint
float64 weight
================================================================================
MSG: arm_navigation_msgs/PositionConstraint
# This message contains the definition of a position constraint.
Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Point target_point_offset

# The nominal/target position for the point we are planning for
geometry_msgs/Point position

# The shape of the bounded region that constrains the position of the end-effector
# This region is always centered at the position defined above
arm_navigation_msgs/Shape constraint_region_shape

# The orientation of the bounded region that constrains the position of the end-effector. 
# This allows the specification of non-axis aligned constraints
geometry_msgs/Quaternion constraint_region_orientation

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.
Header header

# The robot link this constraint refers to
string link_name

# The type of the constraint
int32 type
int32 LINK_FRAME=0
int32 HEADER_FRAME=1

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# optional RPY error tolerances specified if 
float64 absolute_roll_tolerance
float64 absolute_pitch_tolerance
float64 absolute_yaw_tolerance

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/VisibilityConstraint
# This message contains the definition of a visibility constraint.
Header header

# The point stamped target that needs to be kept within view of the sensor
geometry_msgs/PointStamped target

# The local pose of the frame in which visibility is to be maintained
# The frame id should represent the robot link to which the sensor is attached
# The visual axis of the sensor is assumed to be along the X axis of this frame
geometry_msgs/PoseStamped sensor_pose

# The deviation (in radians) that will be tolerated
# Constraint error will be measured as the solid angle between the 
# X axis of the frame defined above and the vector between the origin 
# of the frame defined above and the target location
float64 absolute_tolerance


================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

"""
  __slots__ = ['workspace_parameters','start_state','goal_constraints','path_constraints','planner_id','group_name','num_planning_attempts','allowed_planning_time','expected_path_duration','expected_path_dt']
  _slot_types = ['arm_navigation_msgs/WorkspaceParameters','arm_navigation_msgs/RobotState','arm_navigation_msgs/Constraints','arm_navigation_msgs/Constraints','string','string','int32','duration','duration','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       workspace_parameters,start_state,goal_constraints,path_constraints,planner_id,group_name,num_planning_attempts,allowed_planning_time,expected_path_duration,expected_path_dt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotionPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.workspace_parameters is None:
        self.workspace_parameters = arm_navigation_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = arm_navigation_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = arm_navigation_msgs.msg.Constraints()
      if self.path_constraints is None:
        self.path_constraints = arm_navigation_msgs.msg.Constraints()
      if self.planner_id is None:
        self.planner_id = ''
      if self.group_name is None:
        self.group_name = ''
      if self.num_planning_attempts is None:
        self.num_planning_attempts = 0
      if self.allowed_planning_time is None:
        self.allowed_planning_time = genpy.Duration()
      if self.expected_path_duration is None:
        self.expected_path_duration = genpy.Duration()
      if self.expected_path_dt is None:
        self.expected_path_dt = genpy.Duration()
    else:
      self.workspace_parameters = arm_navigation_msgs.msg.WorkspaceParameters()
      self.start_state = arm_navigation_msgs.msg.RobotState()
      self.goal_constraints = arm_navigation_msgs.msg.Constraints()
      self.path_constraints = arm_navigation_msgs.msg.Constraints()
      self.planner_id = ''
      self.group_name = ''
      self.num_planning_attempts = 0
      self.allowed_planning_time = genpy.Duration()
      self.expected_path_duration = genpy.Duration()
      self.expected_path_dt = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_b.pack(self.workspace_parameters.workspace_region_shape.type))
      length = len(self.workspace_parameters.workspace_region_shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.workspace_parameters.workspace_region_shape.dimensions))
      length = len(self.workspace_parameters.workspace_region_shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.workspace_parameters.workspace_region_shape.triangles))
      length = len(self.workspace_parameters.workspace_region_shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.workspace_parameters.workspace_region_shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.workspace_parameters.workspace_region_pose.header.seq, _x.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.workspace_parameters.workspace_region_pose.header.stamp.nsecs))
      _x = self.workspace_parameters.workspace_region_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.workspace_parameters.workspace_region_pose.pose.position.x, _x.workspace_parameters.workspace_region_pose.pose.position.y, _x.workspace_parameters.workspace_region_pose.pose.position.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs))
      _x = self.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.position))
      length = len(self.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.velocity))
      length = len(self.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.start_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.start_state.multi_dof_joint_state.stamp.secs, _x.start_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.position_constraints:
        _v3 = val1.header
        buff.write(_struct_I.pack(_v3.seq))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.target_point_offset
        _x = _v5
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v6 = val1.position
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v7.type))
        length = len(_v7.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v7.dimensions))
        length = len(_v7.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v7.triangles))
        length = len(_v7.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v7.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v8 = val1.constraint_region_orientation
        _x = _v8
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.orientation_constraints:
        _v9 = val1.header
        buff.write(_struct_I.pack(_v9.seq))
        _v10 = _v9.stamp
        _x = _v10
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v9.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v11 = val1.orientation
        _x = _v11
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.visibility_constraints:
        _v12 = val1.header
        buff.write(_struct_I.pack(_v12.seq))
        _v13 = _v12.stamp
        _x = _v13
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v12.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v14 = val1.target
        _v15 = _v14.header
        buff.write(_struct_I.pack(_v15.seq))
        _v16 = _v15.stamp
        _x = _v16
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v15.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v17 = _v14.point
        _x = _v17
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v18 = val1.sensor_pose
        _v19 = _v18.header
        buff.write(_struct_I.pack(_v19.seq))
        _v20 = _v19.stamp
        _x = _v20
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v19.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v21 = _v18.pose
        _v22 = _v21.position
        _x = _v22
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v23 = _v21.orientation
        _x = _v23
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      length = len(self.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.position_constraints:
        _v24 = val1.header
        buff.write(_struct_I.pack(_v24.seq))
        _v25 = _v24.stamp
        _x = _v25
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v24.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v26 = val1.target_point_offset
        _x = _v26
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v27 = val1.position
        _x = _v27
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v28 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v28.type))
        length = len(_v28.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v28.dimensions))
        length = len(_v28.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v28.triangles))
        length = len(_v28.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v28.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v29 = val1.constraint_region_orientation
        _x = _v29
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.orientation_constraints:
        _v30 = val1.header
        buff.write(_struct_I.pack(_v30.seq))
        _v31 = _v30.stamp
        _x = _v31
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v30.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v32 = val1.orientation
        _x = _v32
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.visibility_constraints:
        _v33 = val1.header
        buff.write(_struct_I.pack(_v33.seq))
        _v34 = _v33.stamp
        _x = _v34
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v33.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v35 = val1.target
        _v36 = _v35.header
        buff.write(_struct_I.pack(_v36.seq))
        _v37 = _v36.stamp
        _x = _v37
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v36.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v38 = _v35.point
        _x = _v38
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v39 = val1.sensor_pose
        _v40 = _v39.header
        buff.write(_struct_I.pack(_v40.seq))
        _v41 = _v40.stamp
        _x = _v41
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v40.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v42 = _v39.pose
        _v43 = _v42.position
        _x = _v43
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v44 = _v42.orientation
        _x = _v44
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7i.pack(_x.num_planning_attempts, _x.allowed_planning_time.secs, _x.allowed_planning_time.nsecs, _x.expected_path_duration.secs, _x.expected_path_duration.nsecs, _x.expected_path_dt.secs, _x.expected_path_dt.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.workspace_parameters is None:
        self.workspace_parameters = arm_navigation_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = arm_navigation_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = arm_navigation_msgs.msg.Constraints()
      if self.path_constraints is None:
        self.path_constraints = arm_navigation_msgs.msg.Constraints()
      if self.allowed_planning_time is None:
        self.allowed_planning_time = genpy.Duration()
      if self.expected_path_duration is None:
        self.expected_path_duration = genpy.Duration()
      if self.expected_path_dt is None:
        self.expected_path_dt = genpy.Duration()
      end = 0
      start = end
      end += 1
      (self.workspace_parameters.workspace_region_shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.workspace_parameters.workspace_region_shape.dimensions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.workspace_parameters.workspace_region_shape.triangles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.workspace_parameters.workspace_region_shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.workspace_parameters.workspace_region_shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.workspace_parameters.workspace_region_pose.header.seq, _x.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.workspace_parameters.workspace_region_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.workspace_parameters.workspace_region_pose.pose.position.x, _x.workspace_parameters.workspace_region_pose.pose.position.y, _x.workspace_parameters.workspace_region_pose.pose.position.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.start_state.multi_dof_joint_state.stamp.secs, _x.start_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v45 = val1.position
        _x = _v45
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v46 = val1.orientation
        _x = _v46
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v47 = val1.header
        start = end
        end += 4
        (_v47.seq,) = _struct_I.unpack(str[start:end])
        _v48 = _v47.stamp
        _x = _v48
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v47.frame_id = str[start:end].decode('utf-8')
        else:
          _v47.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v49 = val1.target_point_offset
        _x = _v49
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v50 = val1.position
        _x = _v50
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v51 = val1.constraint_region_shape
        start = end
        end += 1
        (_v51.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v51.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v51.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v51.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v51.vertices.append(val3)
        _v52 = val1.constraint_region_orientation
        _x = _v52
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v53 = val1.header
        start = end
        end += 4
        (_v53.seq,) = _struct_I.unpack(str[start:end])
        _v54 = _v53.stamp
        _x = _v54
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v53.frame_id = str[start:end].decode('utf-8')
        else:
          _v53.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v55 = val1.orientation
        _x = _v55
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v56 = val1.header
        start = end
        end += 4
        (_v56.seq,) = _struct_I.unpack(str[start:end])
        _v57 = _v56.stamp
        _x = _v57
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.frame_id = str[start:end].decode('utf-8')
        else:
          _v56.frame_id = str[start:end]
        _v58 = val1.target
        _v59 = _v58.header
        start = end
        end += 4
        (_v59.seq,) = _struct_I.unpack(str[start:end])
        _v60 = _v59.stamp
        _x = _v60
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v59.frame_id = str[start:end].decode('utf-8')
        else:
          _v59.frame_id = str[start:end]
        _v61 = _v58.point
        _x = _v61
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v62 = val1.sensor_pose
        _v63 = _v62.header
        start = end
        end += 4
        (_v63.seq,) = _struct_I.unpack(str[start:end])
        _v64 = _v63.stamp
        _x = _v64
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v63.frame_id = str[start:end].decode('utf-8')
        else:
          _v63.frame_id = str[start:end]
        _v65 = _v62.pose
        _v66 = _v65.position
        _x = _v66
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v67 = _v65.orientation
        _x = _v67
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v68 = val1.header
        start = end
        end += 4
        (_v68.seq,) = _struct_I.unpack(str[start:end])
        _v69 = _v68.stamp
        _x = _v69
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v68.frame_id = str[start:end].decode('utf-8')
        else:
          _v68.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v70 = val1.target_point_offset
        _x = _v70
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v71 = val1.position
        _x = _v71
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v72 = val1.constraint_region_shape
        start = end
        end += 1
        (_v72.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v72.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v72.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v72.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v72.vertices.append(val3)
        _v73 = val1.constraint_region_orientation
        _x = _v73
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v74 = val1.header
        start = end
        end += 4
        (_v74.seq,) = _struct_I.unpack(str[start:end])
        _v75 = _v74.stamp
        _x = _v75
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v74.frame_id = str[start:end].decode('utf-8')
        else:
          _v74.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v76 = val1.orientation
        _x = _v76
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v77 = val1.header
        start = end
        end += 4
        (_v77.seq,) = _struct_I.unpack(str[start:end])
        _v78 = _v77.stamp
        _x = _v78
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v77.frame_id = str[start:end].decode('utf-8')
        else:
          _v77.frame_id = str[start:end]
        _v79 = val1.target
        _v80 = _v79.header
        start = end
        end += 4
        (_v80.seq,) = _struct_I.unpack(str[start:end])
        _v81 = _v80.stamp
        _x = _v81
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v80.frame_id = str[start:end].decode('utf-8')
        else:
          _v80.frame_id = str[start:end]
        _v82 = _v79.point
        _x = _v82
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v83 = val1.sensor_pose
        _v84 = _v83.header
        start = end
        end += 4
        (_v84.seq,) = _struct_I.unpack(str[start:end])
        _v85 = _v84.stamp
        _x = _v85
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v84.frame_id = str[start:end].decode('utf-8')
        else:
          _v84.frame_id = str[start:end]
        _v86 = _v83.pose
        _v87 = _v86.position
        _x = _v87
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v88 = _v86.orientation
        _x = _v88
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_id = str[start:end].decode('utf-8')
      else:
        self.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.num_planning_attempts, _x.allowed_planning_time.secs, _x.allowed_planning_time.nsecs, _x.expected_path_duration.secs, _x.expected_path_duration.nsecs, _x.expected_path_dt.secs, _x.expected_path_dt.nsecs,) = _struct_7i.unpack(str[start:end])
      self.allowed_planning_time.canon()
      self.expected_path_duration.canon()
      self.expected_path_dt.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_b.pack(self.workspace_parameters.workspace_region_shape.type))
      length = len(self.workspace_parameters.workspace_region_shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.workspace_parameters.workspace_region_shape.dimensions.tostring())
      length = len(self.workspace_parameters.workspace_region_shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.workspace_parameters.workspace_region_shape.triangles.tostring())
      length = len(self.workspace_parameters.workspace_region_shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.workspace_parameters.workspace_region_shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.workspace_parameters.workspace_region_pose.header.seq, _x.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.workspace_parameters.workspace_region_pose.header.stamp.nsecs))
      _x = self.workspace_parameters.workspace_region_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.workspace_parameters.workspace_region_pose.pose.position.x, _x.workspace_parameters.workspace_region_pose.pose.position.y, _x.workspace_parameters.workspace_region_pose.pose.position.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs))
      _x = self.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.position.tostring())
      length = len(self.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.velocity.tostring())
      length = len(self.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.start_state.multi_dof_joint_state.stamp.secs, _x.start_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.start_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.start_state.multi_dof_joint_state.poses:
        _v89 = val1.position
        _x = _v89
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v90 = val1.orientation
        _x = _v90
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.position_constraints:
        _v91 = val1.header
        buff.write(_struct_I.pack(_v91.seq))
        _v92 = _v91.stamp
        _x = _v92
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v91.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v93 = val1.target_point_offset
        _x = _v93
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v94 = val1.position
        _x = _v94
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v95 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v95.type))
        length = len(_v95.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v95.dimensions.tostring())
        length = len(_v95.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v95.triangles.tostring())
        length = len(_v95.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v95.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v96 = val1.constraint_region_orientation
        _x = _v96
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.orientation_constraints:
        _v97 = val1.header
        buff.write(_struct_I.pack(_v97.seq))
        _v98 = _v97.stamp
        _x = _v98
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v97.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v99 = val1.orientation
        _x = _v99
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal_constraints.visibility_constraints:
        _v100 = val1.header
        buff.write(_struct_I.pack(_v100.seq))
        _v101 = _v100.stamp
        _x = _v101
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v100.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v102 = val1.target
        _v103 = _v102.header
        buff.write(_struct_I.pack(_v103.seq))
        _v104 = _v103.stamp
        _x = _v104
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v103.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v105 = _v102.point
        _x = _v105
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v106 = val1.sensor_pose
        _v107 = _v106.header
        buff.write(_struct_I.pack(_v107.seq))
        _v108 = _v107.stamp
        _x = _v108
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v107.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v109 = _v106.pose
        _v110 = _v109.position
        _x = _v110
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v111 = _v109.orientation
        _x = _v111
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      length = len(self.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.position_constraints:
        _v112 = val1.header
        buff.write(_struct_I.pack(_v112.seq))
        _v113 = _v112.stamp
        _x = _v113
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v112.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v114 = val1.target_point_offset
        _x = _v114
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v115 = val1.position
        _x = _v115
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v116 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v116.type))
        length = len(_v116.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v116.dimensions.tostring())
        length = len(_v116.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v116.triangles.tostring())
        length = len(_v116.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v116.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v117 = val1.constraint_region_orientation
        _x = _v117
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.orientation_constraints:
        _v118 = val1.header
        buff.write(_struct_I.pack(_v118.seq))
        _v119 = _v118.stamp
        _x = _v119
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v118.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v120 = val1.orientation
        _x = _v120
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.path_constraints.visibility_constraints:
        _v121 = val1.header
        buff.write(_struct_I.pack(_v121.seq))
        _v122 = _v121.stamp
        _x = _v122
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v121.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v123 = val1.target
        _v124 = _v123.header
        buff.write(_struct_I.pack(_v124.seq))
        _v125 = _v124.stamp
        _x = _v125
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v124.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v126 = _v123.point
        _x = _v126
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v127 = val1.sensor_pose
        _v128 = _v127.header
        buff.write(_struct_I.pack(_v128.seq))
        _v129 = _v128.stamp
        _x = _v129
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v128.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v130 = _v127.pose
        _v131 = _v130.position
        _x = _v131
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v132 = _v130.orientation
        _x = _v132
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7i.pack(_x.num_planning_attempts, _x.allowed_planning_time.secs, _x.allowed_planning_time.nsecs, _x.expected_path_duration.secs, _x.expected_path_duration.nsecs, _x.expected_path_dt.secs, _x.expected_path_dt.nsecs))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.workspace_parameters is None:
        self.workspace_parameters = arm_navigation_msgs.msg.WorkspaceParameters()
      if self.start_state is None:
        self.start_state = arm_navigation_msgs.msg.RobotState()
      if self.goal_constraints is None:
        self.goal_constraints = arm_navigation_msgs.msg.Constraints()
      if self.path_constraints is None:
        self.path_constraints = arm_navigation_msgs.msg.Constraints()
      if self.allowed_planning_time is None:
        self.allowed_planning_time = genpy.Duration()
      if self.expected_path_duration is None:
        self.expected_path_duration = genpy.Duration()
      if self.expected_path_dt is None:
        self.expected_path_dt = genpy.Duration()
      end = 0
      start = end
      end += 1
      (self.workspace_parameters.workspace_region_shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.workspace_parameters.workspace_region_shape.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.workspace_parameters.workspace_region_shape.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.workspace_parameters.workspace_region_shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.workspace_parameters.workspace_region_shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.workspace_parameters.workspace_region_pose.header.seq, _x.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.workspace_parameters.workspace_region_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.workspace_parameters.workspace_region_pose.pose.position.x, _x.workspace_parameters.workspace_region_pose.pose.position.y, _x.workspace_parameters.workspace_region_pose.pose.position.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.start_state.joint_state.header.seq, _x.start_state.joint_state.header.stamp.secs, _x.start_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.start_state.multi_dof_joint_state.stamp.secs, _x.start_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.start_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.start_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v133 = val1.position
        _x = _v133
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v134 = val1.orientation
        _x = _v134
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.start_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v135 = val1.header
        start = end
        end += 4
        (_v135.seq,) = _struct_I.unpack(str[start:end])
        _v136 = _v135.stamp
        _x = _v136
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v135.frame_id = str[start:end].decode('utf-8')
        else:
          _v135.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v137 = val1.target_point_offset
        _x = _v137
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v138 = val1.position
        _x = _v138
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v139 = val1.constraint_region_shape
        start = end
        end += 1
        (_v139.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v139.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v139.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v139.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v139.vertices.append(val3)
        _v140 = val1.constraint_region_orientation
        _x = _v140
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v141 = val1.header
        start = end
        end += 4
        (_v141.seq,) = _struct_I.unpack(str[start:end])
        _v142 = _v141.stamp
        _x = _v142
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v141.frame_id = str[start:end].decode('utf-8')
        else:
          _v141.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v143 = val1.orientation
        _x = _v143
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v144 = val1.header
        start = end
        end += 4
        (_v144.seq,) = _struct_I.unpack(str[start:end])
        _v145 = _v144.stamp
        _x = _v145
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v144.frame_id = str[start:end].decode('utf-8')
        else:
          _v144.frame_id = str[start:end]
        _v146 = val1.target
        _v147 = _v146.header
        start = end
        end += 4
        (_v147.seq,) = _struct_I.unpack(str[start:end])
        _v148 = _v147.stamp
        _x = _v148
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v147.frame_id = str[start:end].decode('utf-8')
        else:
          _v147.frame_id = str[start:end]
        _v149 = _v146.point
        _x = _v149
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v150 = val1.sensor_pose
        _v151 = _v150.header
        start = end
        end += 4
        (_v151.seq,) = _struct_I.unpack(str[start:end])
        _v152 = _v151.stamp
        _x = _v152
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v151.frame_id = str[start:end].decode('utf-8')
        else:
          _v151.frame_id = str[start:end]
        _v153 = _v150.pose
        _v154 = _v153.position
        _x = _v154
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v155 = _v153.orientation
        _x = _v155
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v156 = val1.header
        start = end
        end += 4
        (_v156.seq,) = _struct_I.unpack(str[start:end])
        _v157 = _v156.stamp
        _x = _v157
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v156.frame_id = str[start:end].decode('utf-8')
        else:
          _v156.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v158 = val1.target_point_offset
        _x = _v158
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v159 = val1.position
        _x = _v159
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v160 = val1.constraint_region_shape
        start = end
        end += 1
        (_v160.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v160.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v160.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v160.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v160.vertices.append(val3)
        _v161 = val1.constraint_region_orientation
        _x = _v161
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v162 = val1.header
        start = end
        end += 4
        (_v162.seq,) = _struct_I.unpack(str[start:end])
        _v163 = _v162.stamp
        _x = _v163
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v162.frame_id = str[start:end].decode('utf-8')
        else:
          _v162.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v164 = val1.orientation
        _x = _v164
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v165 = val1.header
        start = end
        end += 4
        (_v165.seq,) = _struct_I.unpack(str[start:end])
        _v166 = _v165.stamp
        _x = _v166
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v165.frame_id = str[start:end].decode('utf-8')
        else:
          _v165.frame_id = str[start:end]
        _v167 = val1.target
        _v168 = _v167.header
        start = end
        end += 4
        (_v168.seq,) = _struct_I.unpack(str[start:end])
        _v169 = _v168.stamp
        _x = _v169
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v168.frame_id = str[start:end].decode('utf-8')
        else:
          _v168.frame_id = str[start:end]
        _v170 = _v167.point
        _x = _v170
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v171 = val1.sensor_pose
        _v172 = _v171.header
        start = end
        end += 4
        (_v172.seq,) = _struct_I.unpack(str[start:end])
        _v173 = _v172.stamp
        _x = _v173
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v172.frame_id = str[start:end].decode('utf-8')
        else:
          _v172.frame_id = str[start:end]
        _v174 = _v171.pose
        _v175 = _v174.position
        _x = _v175
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v176 = _v174.orientation
        _x = _v176
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.planner_id = str[start:end].decode('utf-8')
      else:
        self.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.group_name = str[start:end].decode('utf-8')
      else:
        self.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.num_planning_attempts, _x.allowed_planning_time.secs, _x.allowed_planning_time.nsecs, _x.expected_path_duration.secs, _x.expected_path_duration.nsecs, _x.expected_path_dt.secs, _x.expected_path_dt.nsecs,) = _struct_7i.unpack(str[start:end])
      self.allowed_planning_time.canon()
      self.expected_path_duration.canon()
      self.expected_path_dt.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_b = struct.Struct("<b")
_struct_d = struct.Struct("<d")
_struct_7i = struct.Struct("<7i")
_struct_2I = struct.Struct("<2I")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_7d3I = struct.Struct("<7d3I")
_struct_3d = struct.Struct("<3d")
