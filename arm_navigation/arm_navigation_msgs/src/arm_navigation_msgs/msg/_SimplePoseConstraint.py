"""autogenerated by genpy from arm_navigation_msgs/SimplePoseConstraint.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SimplePoseConstraint(genpy.Message):
  _md5sum = "3483d830eb84ecd3059741fd417b30da"
  _type = "arm_navigation_msgs/SimplePoseConstraint"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# This message contains the definition of a simple pose constraint 
# that specifies the pose for a particular link of the robot and corresponding
# (absolute) position and orientation tolerances

# The standard ROS message header
Header header

# The robot link this constraint refers to
string link_name

# The desired position of the robot link
geometry_msgs/Pose pose

# Position (absolute) tolerance
geometry_msgs/Point absolute_position_tolerance

# Orientation (absolute) tolerance
float64 absolute_roll_tolerance
float64 absolute_yaw_tolerance
float64 absolute_pitch_tolerance

int32 orientation_constraint_type
int32 HEADER_FRAME=0
int32 LINK_FRAME=1

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  # Pseudo-constants
  HEADER_FRAME = 0
  LINK_FRAME = 1

  __slots__ = ['header','link_name','pose','absolute_position_tolerance','absolute_roll_tolerance','absolute_yaw_tolerance','absolute_pitch_tolerance','orientation_constraint_type']
  _slot_types = ['std_msgs/Header','string','geometry_msgs/Pose','geometry_msgs/Point','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,link_name,pose,absolute_position_tolerance,absolute_roll_tolerance,absolute_yaw_tolerance,absolute_pitch_tolerance,orientation_constraint_type

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SimplePoseConstraint, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.link_name is None:
        self.link_name = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.absolute_position_tolerance is None:
        self.absolute_position_tolerance = geometry_msgs.msg.Point()
      if self.absolute_roll_tolerance is None:
        self.absolute_roll_tolerance = 0.
      if self.absolute_yaw_tolerance is None:
        self.absolute_yaw_tolerance = 0.
      if self.absolute_pitch_tolerance is None:
        self.absolute_pitch_tolerance = 0.
      if self.orientation_constraint_type is None:
        self.orientation_constraint_type = 0
    else:
      self.header = std_msgs.msg.Header()
      self.link_name = ''
      self.pose = geometry_msgs.msg.Pose()
      self.absolute_position_tolerance = geometry_msgs.msg.Point()
      self.absolute_roll_tolerance = 0.
      self.absolute_yaw_tolerance = 0.
      self.absolute_pitch_tolerance = 0.
      self.orientation_constraint_type = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13di.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.absolute_position_tolerance.x, _x.absolute_position_tolerance.y, _x.absolute_position_tolerance.z, _x.absolute_roll_tolerance, _x.absolute_yaw_tolerance, _x.absolute_pitch_tolerance, _x.orientation_constraint_type))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.absolute_position_tolerance is None:
        self.absolute_position_tolerance = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_name = str[start:end].decode('utf-8')
      else:
        self.link_name = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.absolute_position_tolerance.x, _x.absolute_position_tolerance.y, _x.absolute_position_tolerance.z, _x.absolute_roll_tolerance, _x.absolute_yaw_tolerance, _x.absolute_pitch_tolerance, _x.orientation_constraint_type,) = _struct_13di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13di.pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.absolute_position_tolerance.x, _x.absolute_position_tolerance.y, _x.absolute_position_tolerance.z, _x.absolute_roll_tolerance, _x.absolute_yaw_tolerance, _x.absolute_pitch_tolerance, _x.orientation_constraint_type))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.absolute_position_tolerance is None:
        self.absolute_position_tolerance = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.link_name = str[start:end].decode('utf-8')
      else:
        self.link_name = str[start:end]
      _x = self
      start = end
      end += 108
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.absolute_position_tolerance.x, _x.absolute_position_tolerance.y, _x.absolute_position_tolerance.z, _x.absolute_roll_tolerance, _x.absolute_yaw_tolerance, _x.absolute_pitch_tolerance, _x.orientation_constraint_type,) = _struct_13di.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13di = struct.Struct("<13di")
_struct_3I = struct.Struct("<3I")
