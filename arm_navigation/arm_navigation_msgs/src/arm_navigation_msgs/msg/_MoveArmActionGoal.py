"""autogenerated by genpy from arm_navigation_msgs/MoveArmActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import arm_navigation_msgs.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class MoveArmActionGoal(genpy.Message):
  _md5sum = "d560cc046d6b5e8bf3f70a960054d6c6"
  _type = "arm_navigation_msgs/MoveArmActionGoal"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
MoveArmGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: arm_navigation_msgs/MoveArmGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Service name to call for getting a motion plan
# Move arm will call a service on this service name 
# using the MotionPlanRequest specified here
string planner_service_name

# A planning scene diff
PlanningScene planning_scene_diff

# A motion planning request
MotionPlanRequest motion_plan_request

# OPTIONAL: Diff uses ordered collision operations in addition to allowed_collision_matrix
arm_navigation_msgs/OrderedCollisionOperations operations

# OPTIONAL flag
# Setting this flag to true will allow move_arm to accept plans that do not go all the way to the goal
bool accept_partial_plans

# OPTIONAL flag
# Setting this flag to true will allow move_arm to accept invalid goals
# This is useful if you are using a planner like CHOMP along with a noisy rapidly changing collision map
# and you would like to plan to a goal near an object.
bool accept_invalid_goals

# OPTIONAL flag
# Setting this flag to true will disable the call to IK for a pose goal
bool disable_ik

# OPTIONAL flag
# Setting this flag to true will disable collision monitoring during execution of a trajectory
bool disable_collision_monitoring

================================================================================
MSG: arm_navigation_msgs/PlanningScene
#full robot state
arm_navigation_msgs/RobotState robot_state

#additional frames for duplicating tf
geometry_msgs/TransformStamped[] fixed_frame_transforms

#full allowed collision matrix
AllowedCollisionMatrix allowed_collision_matrix

#allowed contacts
arm_navigation_msgs/AllowedContactSpecification[] allowed_contacts

#all link paddings
arm_navigation_msgs/LinkPadding[] link_padding

#collision objects
arm_navigation_msgs/CollisionObject[] collision_objects
arm_navigation_msgs/AttachedCollisionObject[] attached_collision_objects

#the collision map
arm_navigation_msgs/CollisionMap collision_map

================================================================================
MSG: arm_navigation_msgs/RobotState
# This message contains information about the robot state, i.e. the positions of its joints and links
sensor_msgs/JointState joint_state
arm_navigation_msgs/MultiDOFJointState multi_dof_joint_state

================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: arm_navigation_msgs/MultiDOFJointState
#A representation of a multi-dof joint state
time stamp
string[] joint_names
string[] frame_ids
string[] child_frame_ids
geometry_msgs/Pose[] poses

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://www.ros.org/wiki/tf">tf</a> package. 
# See it's documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
================================================================================
MSG: arm_navigation_msgs/AllowedCollisionMatrix
# the list of link names in the matrix
string[] link_names

# the individual entries in the allowed collision matrix
# symmetric, with same order as link_names
AllowedCollisionEntry[] entries

================================================================================
MSG: arm_navigation_msgs/AllowedCollisionEntry
# whether or not collision checking is enabled
bool[] enabled

================================================================================
MSG: arm_navigation_msgs/AllowedContactSpecification
# The names of the regions
string name

# The shape of the region in the environment
arm_navigation_msgs/Shape shape

# The pose of the space defining the region
geometry_msgs/PoseStamped pose_stamped

# The set of links that will be allowed to have penetration contact within this region
string[] link_names

# The maximum penetration depth allowed for every link
float64 penetration_depth

================================================================================
MSG: arm_navigation_msgs/Shape
byte SPHERE=0
byte BOX=1
byte CYLINDER=2
byte MESH=3

byte type


#### define sphere, box, cylinder ####
# the origin of each shape is considered at the shape's center

# for sphere
# radius := dimensions[0]

# for cylinder
# radius := dimensions[0]
# length := dimensions[1]
# the length is along the Z axis

# for box
# size_x := dimensions[0]
# size_y := dimensions[1]
# size_z := dimensions[2]
float64[] dimensions


#### define mesh ####

# list of triangles; triangle k is defined by tre vertices located
# at indices triangles[3k], triangles[3k+1], triangles[3k+2]
int32[] triangles
geometry_msgs/Point[] vertices

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: arm_navigation_msgs/LinkPadding
#name for the link
string link_name

# padding to apply to the link
float64 padding

================================================================================
MSG: arm_navigation_msgs/CollisionObject
# a header, used for interpreting the poses
Header header

# the id of the object
string id

# The padding used for filtering points near the object.
# This does not affect collision checking for the object.  
# Set to negative to get zero padding.
float32 padding

#This contains what is to be done with the object
CollisionObjectOperation operation

#the shapes associated with the object
arm_navigation_msgs/Shape[] shapes

#the poses associated with the shapes - will be transformed using the header
geometry_msgs/Pose[] poses

================================================================================
MSG: arm_navigation_msgs/CollisionObjectOperation
#Puts the object into the environment
#or updates the object if already added
byte ADD=0

#Removes the object from the environment entirely
byte REMOVE=1

#Only valid within the context of a CollisionAttachedObject message
#Will be ignored if sent with an CollisionObject message
#Takes an attached object, detaches from the attached link
#But adds back in as regular object
byte DETACH_AND_ADD_AS_OBJECT=2

#Only valid within the context of a CollisionAttachedObject message
#Will be ignored if sent with an CollisionObject message
#Takes current object in the environment and removes it as
#a regular object
byte ATTACH_AND_REMOVE_AS_OBJECT=3

# Byte code for operation
byte operation

================================================================================
MSG: arm_navigation_msgs/AttachedCollisionObject
# The CollisionObject will be attached with a fixed joint to this link
# If link name is set to REMOVE_ALL_ATTACHED_OBJECTS and object.operation 
# is set to REMOVE will remove all attached bodies attached to any object
string link_name

#Reserved for indicating that all attached objects should be removed
string REMOVE_ALL_ATTACHED_OBJECTS = "all"

#This contains the actual shapes and poses for the CollisionObject
#to be attached to the link
#If action is remove and no object.id is set, all objects
#attached to the link indicated by link_name will be removed
CollisionObject object

# The set of links that the attached objects are allowed to touch
# by default - the link_name is included by default
string[] touch_links

================================================================================
MSG: arm_navigation_msgs/CollisionMap
#header for interpreting box positions
Header header

#boxes for use in collision testing
OrientedBoundingBox[] boxes

================================================================================
MSG: arm_navigation_msgs/OrientedBoundingBox
#the center of the box
geometry_msgs/Point32 center

#the extents of the box, assuming the center is at the point
geometry_msgs/Point32 extents

#the axis of the box
geometry_msgs/Point32 axis

#the angle of rotation around the axis
float32 angle

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: arm_navigation_msgs/MotionPlanRequest
# This service contains the definition for a request to the motion
# planner and the output it provides

# Parameters for the workspace that the planner should work inside
arm_navigation_msgs/WorkspaceParameters workspace_parameters

# Starting state updates. If certain joints should be considered
# at positions other than the current ones, these positions should
# be set here
arm_navigation_msgs/RobotState start_state

# The goal state for the model to plan for. The goal is achieved
# if all constraints are satisfied
arm_navigation_msgs/Constraints goal_constraints

# No state at any point along the path in the produced motion plan will violate these constraints
arm_navigation_msgs/Constraints path_constraints

# The name of the motion planner to use. If no name is specified,
# a default motion planner will be used
string planner_id

# The name of the group of joints on which this planner is operating
string group_name

# The number of times this plan is to be computed. Shortest solution
# will be reported.
int32 num_planning_attempts

# The maximum amount of time the motion planner is allowed to plan for
duration allowed_planning_time

# An expected path duration (in seconds) along with an expected discretization of the path allows the planner to determine the discretization of the trajectory that it returns
duration expected_path_duration
duration expected_path_dt

================================================================================
MSG: arm_navigation_msgs/WorkspaceParameters
# This message contains a set of parameters useful in
# setting up the workspace for planning
arm_navigation_msgs/Shape  workspace_region_shape
geometry_msgs/PoseStamped    workspace_region_pose


================================================================================
MSG: arm_navigation_msgs/Constraints
# This message contains a list of motion planning constraints.

arm_navigation_msgs/JointConstraint[] joint_constraints
arm_navigation_msgs/PositionConstraint[] position_constraints
arm_navigation_msgs/OrientationConstraint[] orientation_constraints
arm_navigation_msgs/VisibilityConstraint[] visibility_constraints

================================================================================
MSG: arm_navigation_msgs/JointConstraint
# Constrain the position of a joint to be within a certain bound
string joint_name

# the bound to be achieved is [position - tolerance_below, position + tolerance_above]
float64 position
float64 tolerance_above
float64 tolerance_below

# A weighting factor for this constraint
float64 weight
================================================================================
MSG: arm_navigation_msgs/PositionConstraint
# This message contains the definition of a position constraint.
Header header

# The robot link this constraint refers to
string link_name

# The offset (in the link frame) for the target point on the link we are planning for
geometry_msgs/Point target_point_offset

# The nominal/target position for the point we are planning for
geometry_msgs/Point position

# The shape of the bounded region that constrains the position of the end-effector
# This region is always centered at the position defined above
arm_navigation_msgs/Shape constraint_region_shape

# The orientation of the bounded region that constrains the position of the end-effector. 
# This allows the specification of non-axis aligned constraints
geometry_msgs/Quaternion constraint_region_orientation

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/OrientationConstraint
# This message contains the definition of an orientation constraint.
Header header

# The robot link this constraint refers to
string link_name

# The type of the constraint
int32 type
int32 LINK_FRAME=0
int32 HEADER_FRAME=1

# The desired orientation of the robot link specified as a quaternion
geometry_msgs/Quaternion orientation

# optional RPY error tolerances specified if 
float64 absolute_roll_tolerance
float64 absolute_pitch_tolerance
float64 absolute_yaw_tolerance

# Constraint weighting factor - a weight for this constraint
float64 weight

================================================================================
MSG: arm_navigation_msgs/VisibilityConstraint
# This message contains the definition of a visibility constraint.
Header header

# The point stamped target that needs to be kept within view of the sensor
geometry_msgs/PointStamped target

# The local pose of the frame in which visibility is to be maintained
# The frame id should represent the robot link to which the sensor is attached
# The visual axis of the sensor is assumed to be along the X axis of this frame
geometry_msgs/PoseStamped sensor_pose

# The deviation (in radians) that will be tolerated
# Constraint error will be measured as the solid angle between the 
# X axis of the frame defined above and the vector between the origin 
# of the frame defined above and the target location
float64 absolute_tolerance


================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point

================================================================================
MSG: arm_navigation_msgs/OrderedCollisionOperations
# A set of collision operations that will be performed in the order they are specified
CollisionOperation[] collision_operations
================================================================================
MSG: arm_navigation_msgs/CollisionOperation
# A definition of a collision operation
# E.g. ("gripper",COLLISION_SET_ALL,ENABLE) will enable collisions 
# between the gripper and all objects in the collision space

string object1
string object2
string COLLISION_SET_ALL="all"
string COLLISION_SET_OBJECTS="objects"
string COLLISION_SET_ATTACHED_OBJECTS="attached"

# The penetration distance to which collisions are allowed. This is 0.0 by default.
float64 penetration_distance

# Flag that determines whether collisions will be enabled or disabled for the pair of objects specified above
int32 operation
int32 DISABLE=0
int32 ENABLE=1

"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','arm_navigation_msgs/MoveArmGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveArmActionGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = arm_navigation_msgs.msg.MoveArmGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = arm_navigation_msgs.msg.MoveArmGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.planner_service_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_scene_diff.robot_state.joint_state.position))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_scene_diff.robot_state.joint_state.velocity))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.planning_scene_diff.robot_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.secs, _x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses:
        _v1 = val1.position
        _x = _v1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v2 = val1.orientation
        _x = _v2
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.fixed_frame_transforms:
        _v3 = val1.header
        buff.write(_struct_I.pack(_v3.seq))
        _v4 = _v3.stamp
        _x = _v4
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v3.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v5 = val1.transform
        _v6 = _v5.translation
        _x = _v6
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v7 = _v5.rotation
        _x = _v7
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.allowed_collision_matrix.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_collision_matrix.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.allowed_collision_matrix.entries)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_collision_matrix.entries:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(struct.pack(pattern, *val1.enabled))
      length = len(self.goal.planning_scene_diff.allowed_contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_contacts:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v8 = val1.shape
        buff.write(_struct_b.pack(_v8.type))
        length = len(_v8.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v8.dimensions))
        length = len(_v8.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v8.triangles))
        length = len(_v8.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v8.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v9 = val1.pose_stamped
        _v10 = _v9.header
        buff.write(_struct_I.pack(_v10.seq))
        _v11 = _v10.stamp
        _x = _v11
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v10.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v12 = _v9.pose
        _v13 = _v12.position
        _x = _v13
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v14 = _v12.orientation
        _x = _v14
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.link_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.link_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        buff.write(_struct_d.pack(val1.penetration_depth))
      length = len(self.goal.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.padding))
      length = len(self.goal.planning_scene_diff.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.collision_objects:
        _v15 = val1.header
        buff.write(_struct_I.pack(_v15.seq))
        _v16 = _v15.stamp
        _x = _v16
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v15.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(val1.padding))
        _v17 = val1.operation
        buff.write(_struct_b.pack(_v17.operation))
        length = len(val1.shapes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shapes:
          buff.write(_struct_b.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val2.dimensions))
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val2.triangles))
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v18 = val2.position
          _x = _v18
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v19 = val2.orientation
          _x = _v19
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v20 = val1.object
        _v21 = _v20.header
        buff.write(_struct_I.pack(_v21.seq))
        _v22 = _v21.stamp
        _x = _v22
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v21.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v20.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(_v20.padding))
        _v23 = _v20.operation
        buff.write(_struct_b.pack(_v23.operation))
        length = len(_v20.shapes)
        buff.write(_struct_I.pack(length))
        for val3 in _v20.shapes:
          buff.write(_struct_b.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(struct.pack(pattern, *val3.dimensions))
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(struct.pack(pattern, *val3.triangles))
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v20.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v20.poses:
          _v24 = val3.position
          _x = _v24
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v25 = val3.orientation
          _x = _v25
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_scene_diff.collision_map.header.seq, _x.goal.planning_scene_diff.collision_map.header.stamp.secs, _x.goal.planning_scene_diff.collision_map.header.stamp.nsecs))
      _x = self.goal.planning_scene_diff.collision_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_scene_diff.collision_map.boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.collision_map.boxes:
        _v26 = val1.center
        _x = _v26
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v27 = val1.extents
        _x = _v27
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v28 = val1.axis
        _x = _v28
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.angle))
      buff.write(_struct_b.pack(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.type))
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions))
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.pack(pattern, *self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles))
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.seq, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.nsecs))
      _x = self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.goal.motion_plan_request.start_state.joint_state.header.seq, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.secs, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.nsecs))
      _x = self.goal.motion_plan_request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.motion_plan_request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.motion_plan_request.start_state.joint_state.position))
      length = len(self.goal.motion_plan_request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.motion_plan_request.start_state.joint_state.velocity))
      length = len(self.goal.motion_plan_request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.motion_plan_request.start_state.joint_state.effort))
      _x = self
      buff.write(_struct_2I.pack(_x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.secs, _x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses:
        _v29 = val1.position
        _x = _v29
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v30 = val1.orientation
        _x = _v30
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.motion_plan_request.goal_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.position_constraints:
        _v31 = val1.header
        buff.write(_struct_I.pack(_v31.seq))
        _v32 = _v31.stamp
        _x = _v32
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v31.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v33 = val1.target_point_offset
        _x = _v33
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v34 = val1.position
        _x = _v34
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v35 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v35.type))
        length = len(_v35.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v35.dimensions))
        length = len(_v35.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v35.triangles))
        length = len(_v35.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v35.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v36 = val1.constraint_region_orientation
        _x = _v36
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.orientation_constraints:
        _v37 = val1.header
        buff.write(_struct_I.pack(_v37.seq))
        _v38 = _v37.stamp
        _x = _v38
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v37.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v39 = val1.orientation
        _x = _v39
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.visibility_constraints:
        _v40 = val1.header
        buff.write(_struct_I.pack(_v40.seq))
        _v41 = _v40.stamp
        _x = _v41
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v40.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v42 = val1.target
        _v43 = _v42.header
        buff.write(_struct_I.pack(_v43.seq))
        _v44 = _v43.stamp
        _x = _v44
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v43.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v45 = _v42.point
        _x = _v45
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v46 = val1.sensor_pose
        _v47 = _v46.header
        buff.write(_struct_I.pack(_v47.seq))
        _v48 = _v47.stamp
        _x = _v48
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v47.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v49 = _v46.pose
        _v50 = _v49.position
        _x = _v50
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v51 = _v49.orientation
        _x = _v51
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      length = len(self.goal.motion_plan_request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.motion_plan_request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.position_constraints:
        _v52 = val1.header
        buff.write(_struct_I.pack(_v52.seq))
        _v53 = _v52.stamp
        _x = _v53
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v52.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v54 = val1.target_point_offset
        _x = _v54
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v55 = val1.position
        _x = _v55
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v56 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v56.type))
        length = len(_v56.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *_v56.dimensions))
        length = len(_v56.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(struct.pack(pattern, *_v56.triangles))
        length = len(_v56.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v56.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v57 = val1.constraint_region_orientation
        _x = _v57
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.motion_plan_request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.orientation_constraints:
        _v58 = val1.header
        buff.write(_struct_I.pack(_v58.seq))
        _v59 = _v58.stamp
        _x = _v59
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v58.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v60 = val1.orientation
        _x = _v60
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal.motion_plan_request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.visibility_constraints:
        _v61 = val1.header
        buff.write(_struct_I.pack(_v61.seq))
        _v62 = _v61.stamp
        _x = _v62
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v61.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v63 = val1.target
        _v64 = _v63.header
        buff.write(_struct_I.pack(_v64.seq))
        _v65 = _v64.stamp
        _x = _v65
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v64.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v66 = _v63.point
        _x = _v66
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v67 = val1.sensor_pose
        _v68 = _v67.header
        buff.write(_struct_I.pack(_v68.seq))
        _v69 = _v68.stamp
        _x = _v69
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v68.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v70 = _v67.pose
        _v71 = _v70.position
        _x = _v71
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v72 = _v70.orientation
        _x = _v72
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self.goal.motion_plan_request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.motion_plan_request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7i.pack(_x.goal.motion_plan_request.num_planning_attempts, _x.goal.motion_plan_request.allowed_planning_time.secs, _x.goal.motion_plan_request.allowed_planning_time.nsecs, _x.goal.motion_plan_request.expected_path_duration.secs, _x.goal.motion_plan_request.expected_path_duration.nsecs, _x.goal.motion_plan_request.expected_path_dt.secs, _x.goal.motion_plan_request.expected_path_dt.nsecs))
      length = len(self.goal.operations.collision_operations)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.operations.collision_operations:
        _x = val1.object1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.object2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_di.pack(_x.penetration_distance, _x.operation))
      _x = self
      buff.write(_struct_4B.pack(_x.goal.accept_partial_plans, _x.goal.accept_invalid_goals, _x.goal.disable_ik, _x.goal.disable_collision_monitoring))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = arm_navigation_msgs.msg.MoveArmGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planner_service_name = str[start:end].decode('utf-8')
      else:
        self.goal.planner_service_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.secs, _x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v73 = val1.position
        _x = _v73
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v74 = val1.orientation
        _x = _v74
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v75 = val1.header
        start = end
        end += 4
        (_v75.seq,) = _struct_I.unpack(str[start:end])
        _v76 = _v75.stamp
        _x = _v76
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v75.frame_id = str[start:end].decode('utf-8')
        else:
          _v75.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v77 = val1.transform
        _v78 = _v77.translation
        _x = _v78
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v79 = _v77.rotation
        _x = _v79
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_collision_matrix.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.allowed_collision_matrix.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_collision_matrix.entries = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = struct.unpack(pattern, str[start:end])
        val1.enabled = map(bool, val1.enabled)
        self.goal.planning_scene_diff.allowed_collision_matrix.entries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_contacts = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AllowedContactSpecification()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v80 = val1.shape
        start = end
        end += 1
        (_v80.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v80.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v80.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v80.vertices.append(val3)
        _v81 = val1.pose_stamped
        _v82 = _v81.header
        start = end
        end += 4
        (_v82.seq,) = _struct_I.unpack(str[start:end])
        _v83 = _v82.stamp
        _x = _v83
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v82.frame_id = str[start:end].decode('utf-8')
        else:
          _v82.frame_id = str[start:end]
        _v84 = _v81.pose
        _v85 = _v84.position
        _x = _v85
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v86 = _v84.orientation
        _x = _v86
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.link_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.link_names.append(val2)
        start = end
        end += 8
        (val1.penetration_depth,) = _struct_d.unpack(str[start:end])
        self.goal.planning_scene_diff.allowed_contacts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _struct_d.unpack(str[start:end])
        self.goal.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.collision_objects = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.CollisionObject()
        _v87 = val1.header
        start = end
        end += 4
        (_v87.seq,) = _struct_I.unpack(str[start:end])
        _v88 = _v87.stamp
        _x = _v88
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v87.frame_id = str[start:end].decode('utf-8')
        else:
          _v87.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.padding,) = _struct_f.unpack(str[start:end])
        _v89 = val1.operation
        start = end
        end += 1
        (_v89.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shapes = []
        for i in range(0, length):
          val2 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val2.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.triangles = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.shapes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v90 = val2.position
          _x = _v90
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v91 = val2.orientation
          _x = _v91
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        self.goal.planning_scene_diff.collision_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.attached_collision_objects = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v92 = val1.object
        _v93 = _v92.header
        start = end
        end += 4
        (_v93.seq,) = _struct_I.unpack(str[start:end])
        _v94 = _v93.stamp
        _x = _v94
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v93.frame_id = str[start:end].decode('utf-8')
        else:
          _v93.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v92.id = str[start:end].decode('utf-8')
        else:
          _v92.id = str[start:end]
        start = end
        end += 4
        (_v92.padding,) = _struct_f.unpack(str[start:end])
        _v95 = _v92.operation
        start = end
        end += 1
        (_v95.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v92.shapes = []
        for i in range(0, length):
          val3 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val3.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val3.triangles = struct.unpack(pattern, str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v92.shapes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v92.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v96 = val3.position
          _x = _v96
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v97 = val3.orientation
          _x = _v97
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v92.poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        self.goal.planning_scene_diff.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.planning_scene_diff.collision_map.header.seq, _x.goal.planning_scene_diff.collision_map.header.stamp.secs, _x.goal.planning_scene_diff.collision_map.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_scene_diff.collision_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_scene_diff.collision_map.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.collision_map.boxes = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientedBoundingBox()
        _v98 = val1.center
        _x = _v98
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v99 = val1.extents
        _x = _v99
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v100 = val1.axis
        _x = _v100
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        start = end
        end += 4
        (val1.angle,) = _struct_f.unpack(str[start:end])
        self.goal.planning_scene_diff.collision_map.boxes.append(val1)
      start = end
      end += 1
      (self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.seq, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.goal.motion_plan_request.start_state.joint_state.header.seq, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.secs, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.effort = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.secs, _x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v101 = val1.position
        _x = _v101
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v102 = val1.orientation
        _x = _v102
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v103 = val1.header
        start = end
        end += 4
        (_v103.seq,) = _struct_I.unpack(str[start:end])
        _v104 = _v103.stamp
        _x = _v104
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v103.frame_id = str[start:end].decode('utf-8')
        else:
          _v103.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v105 = val1.target_point_offset
        _x = _v105
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v106 = val1.position
        _x = _v106
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v107 = val1.constraint_region_shape
        start = end
        end += 1
        (_v107.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v107.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v107.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v107.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v107.vertices.append(val3)
        _v108 = val1.constraint_region_orientation
        _x = _v108
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v109 = val1.header
        start = end
        end += 4
        (_v109.seq,) = _struct_I.unpack(str[start:end])
        _v110 = _v109.stamp
        _x = _v110
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v109.frame_id = str[start:end].decode('utf-8')
        else:
          _v109.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v111 = val1.orientation
        _x = _v111
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v112 = val1.header
        start = end
        end += 4
        (_v112.seq,) = _struct_I.unpack(str[start:end])
        _v113 = _v112.stamp
        _x = _v113
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v112.frame_id = str[start:end].decode('utf-8')
        else:
          _v112.frame_id = str[start:end]
        _v114 = val1.target
        _v115 = _v114.header
        start = end
        end += 4
        (_v115.seq,) = _struct_I.unpack(str[start:end])
        _v116 = _v115.stamp
        _x = _v116
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v115.frame_id = str[start:end].decode('utf-8')
        else:
          _v115.frame_id = str[start:end]
        _v117 = _v114.point
        _x = _v117
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v118 = val1.sensor_pose
        _v119 = _v118.header
        start = end
        end += 4
        (_v119.seq,) = _struct_I.unpack(str[start:end])
        _v120 = _v119.stamp
        _x = _v120
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v119.frame_id = str[start:end].decode('utf-8')
        else:
          _v119.frame_id = str[start:end]
        _v121 = _v118.pose
        _v122 = _v121.position
        _x = _v122
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v123 = _v121.orientation
        _x = _v123
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v124 = val1.header
        start = end
        end += 4
        (_v124.seq,) = _struct_I.unpack(str[start:end])
        _v125 = _v124.stamp
        _x = _v125
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v124.frame_id = str[start:end].decode('utf-8')
        else:
          _v124.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v126 = val1.target_point_offset
        _x = _v126
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v127 = val1.position
        _x = _v127
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v128 = val1.constraint_region_shape
        start = end
        end += 1
        (_v128.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v128.dimensions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v128.triangles = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v128.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v128.vertices.append(val3)
        _v129 = val1.constraint_region_orientation
        _x = _v129
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v130 = val1.header
        start = end
        end += 4
        (_v130.seq,) = _struct_I.unpack(str[start:end])
        _v131 = _v130.stamp
        _x = _v131
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v130.frame_id = str[start:end].decode('utf-8')
        else:
          _v130.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v132 = val1.orientation
        _x = _v132
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v133 = val1.header
        start = end
        end += 4
        (_v133.seq,) = _struct_I.unpack(str[start:end])
        _v134 = _v133.stamp
        _x = _v134
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v133.frame_id = str[start:end].decode('utf-8')
        else:
          _v133.frame_id = str[start:end]
        _v135 = val1.target
        _v136 = _v135.header
        start = end
        end += 4
        (_v136.seq,) = _struct_I.unpack(str[start:end])
        _v137 = _v136.stamp
        _x = _v137
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v136.frame_id = str[start:end].decode('utf-8')
        else:
          _v136.frame_id = str[start:end]
        _v138 = _v135.point
        _x = _v138
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v139 = val1.sensor_pose
        _v140 = _v139.header
        start = end
        end += 4
        (_v140.seq,) = _struct_I.unpack(str[start:end])
        _v141 = _v140.stamp
        _x = _v141
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v140.frame_id = str[start:end].decode('utf-8')
        else:
          _v140.frame_id = str[start:end]
        _v142 = _v139.pose
        _v143 = _v142.position
        _x = _v143
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v144 = _v142.orientation
        _x = _v144
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.planner_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.group_name = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.goal.motion_plan_request.num_planning_attempts, _x.goal.motion_plan_request.allowed_planning_time.secs, _x.goal.motion_plan_request.allowed_planning_time.nsecs, _x.goal.motion_plan_request.expected_path_duration.secs, _x.goal.motion_plan_request.expected_path_duration.nsecs, _x.goal.motion_plan_request.expected_path_dt.secs, _x.goal.motion_plan_request.expected_path_dt.nsecs,) = _struct_7i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.operations.collision_operations = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.CollisionOperation()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object1 = str[start:end].decode('utf-8')
        else:
          val1.object1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object2 = str[start:end].decode('utf-8')
        else:
          val1.object2 = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.penetration_distance, _x.operation,) = _struct_di.unpack(str[start:end])
        self.goal.operations.collision_operations.append(val1)
      _x = self
      start = end
      end += 4
      (_x.goal.accept_partial_plans, _x.goal.accept_invalid_goals, _x.goal.disable_ik, _x.goal.disable_collision_monitoring,) = _struct_4B.unpack(str[start:end])
      self.goal.accept_partial_plans = bool(self.goal.accept_partial_plans)
      self.goal.accept_invalid_goals = bool(self.goal.accept_invalid_goals)
      self.goal.disable_ik = bool(self.goal.disable_ik)
      self.goal.disable_collision_monitoring = bool(self.goal.disable_collision_monitoring)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.planner_service_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs))
      _x = self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_scene_diff.robot_state.joint_state.position.tostring())
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_scene_diff.robot_state.joint_state.velocity.tostring())
      length = len(self.goal.planning_scene_diff.robot_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.planning_scene_diff.robot_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.secs, _x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses:
        _v145 = val1.position
        _x = _v145
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v146 = val1.orientation
        _x = _v146
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.fixed_frame_transforms)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.fixed_frame_transforms:
        _v147 = val1.header
        buff.write(_struct_I.pack(_v147.seq))
        _v148 = _v147.stamp
        _x = _v148
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v147.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v149 = val1.transform
        _v150 = _v149.translation
        _x = _v150
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v151 = _v149.rotation
        _x = _v151
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.allowed_collision_matrix.link_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_collision_matrix.link_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.planning_scene_diff.allowed_collision_matrix.entries)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_collision_matrix.entries:
        length = len(val1.enabled)
        buff.write(_struct_I.pack(length))
        pattern = '<%sB'%length
        buff.write(val1.enabled.tostring())
      length = len(self.goal.planning_scene_diff.allowed_contacts)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.allowed_contacts:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v152 = val1.shape
        buff.write(_struct_b.pack(_v152.type))
        length = len(_v152.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v152.dimensions.tostring())
        length = len(_v152.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v152.triangles.tostring())
        length = len(_v152.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v152.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v153 = val1.pose_stamped
        _v154 = _v153.header
        buff.write(_struct_I.pack(_v154.seq))
        _v155 = _v154.stamp
        _x = _v155
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v154.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v156 = _v153.pose
        _v157 = _v156.position
        _x = _v157
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v158 = _v156.orientation
        _x = _v158
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.link_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.link_names:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
        buff.write(_struct_d.pack(val1.penetration_depth))
      length = len(self.goal.planning_scene_diff.link_padding)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.link_padding:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.padding))
      length = len(self.goal.planning_scene_diff.collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.collision_objects:
        _v159 = val1.header
        buff.write(_struct_I.pack(_v159.seq))
        _v160 = _v159.stamp
        _x = _v160
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v159.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(val1.padding))
        _v161 = val1.operation
        buff.write(_struct_b.pack(_v161.operation))
        length = len(val1.shapes)
        buff.write(_struct_I.pack(length))
        for val2 in val1.shapes:
          buff.write(_struct_b.pack(val2.type))
          length = len(val2.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val2.dimensions.tostring())
          length = len(val2.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val2.triangles.tostring())
          length = len(val2.vertices)
          buff.write(_struct_I.pack(length))
          for val3 in val2.vertices:
            _x = val3
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(val1.poses)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poses:
          _v162 = val2.position
          _x = _v162
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v163 = val2.orientation
          _x = _v163
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.planning_scene_diff.attached_collision_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.attached_collision_objects:
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v164 = val1.object
        _v165 = _v164.header
        buff.write(_struct_I.pack(_v165.seq))
        _v166 = _v165.stamp
        _x = _v166
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v165.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = _v164.id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_f.pack(_v164.padding))
        _v167 = _v164.operation
        buff.write(_struct_b.pack(_v167.operation))
        length = len(_v164.shapes)
        buff.write(_struct_I.pack(length))
        for val3 in _v164.shapes:
          buff.write(_struct_b.pack(val3.type))
          length = len(val3.dimensions)
          buff.write(_struct_I.pack(length))
          pattern = '<%sd'%length
          buff.write(val3.dimensions.tostring())
          length = len(val3.triangles)
          buff.write(_struct_I.pack(length))
          pattern = '<%si'%length
          buff.write(val3.triangles.tostring())
          length = len(val3.vertices)
          buff.write(_struct_I.pack(length))
          for val4 in val3.vertices:
            _x = val4
            buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        length = len(_v164.poses)
        buff.write(_struct_I.pack(length))
        for val3 in _v164.poses:
          _v168 = val3.position
          _x = _v168
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
          _v169 = val3.orientation
          _x = _v169
          buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        length = len(val1.touch_links)
        buff.write(_struct_I.pack(length))
        for val2 in val1.touch_links:
          length = len(val2)
          if python3 or type(val2) == unicode:
            val2 = val2.encode('utf-8')
            length = len(val2)
          buff.write(struct.pack('<I%ss'%length, length, val2))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.planning_scene_diff.collision_map.header.seq, _x.goal.planning_scene_diff.collision_map.header.stamp.secs, _x.goal.planning_scene_diff.collision_map.header.stamp.nsecs))
      _x = self.goal.planning_scene_diff.collision_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.planning_scene_diff.collision_map.boxes)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.planning_scene_diff.collision_map.boxes:
        _v170 = val1.center
        _x = _v170
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v171 = val1.extents
        _x = _v171
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        _v172 = val1.axis
        _x = _v172
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
        buff.write(_struct_f.pack(val1.angle))
      buff.write(_struct_b.pack(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.type))
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions.tostring())
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles.tostring())
      length = len(self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices:
        _x = val1
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.seq, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.nsecs))
      _x = self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.goal.motion_plan_request.start_state.joint_state.header.seq, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.secs, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.nsecs))
      _x = self.goal.motion_plan_request.start_state.joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.motion_plan_request.start_state.joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.motion_plan_request.start_state.joint_state.position.tostring())
      length = len(self.goal.motion_plan_request.start_state.joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.motion_plan_request.start_state.joint_state.velocity.tostring())
      length = len(self.goal.motion_plan_request.start_state.joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.motion_plan_request.start_state.joint_state.effort.tostring())
      _x = self
      buff.write(_struct_2I.pack(_x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.secs, _x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.nsecs))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses:
        _v173 = val1.position
        _x = _v173
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v174 = val1.orientation
        _x = _v174
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
      length = len(self.goal.motion_plan_request.goal_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.position_constraints:
        _v175 = val1.header
        buff.write(_struct_I.pack(_v175.seq))
        _v176 = _v175.stamp
        _x = _v176
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v175.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v177 = val1.target_point_offset
        _x = _v177
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v178 = val1.position
        _x = _v178
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v179 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v179.type))
        length = len(_v179.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v179.dimensions.tostring())
        length = len(_v179.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v179.triangles.tostring())
        length = len(_v179.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v179.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v180 = val1.constraint_region_orientation
        _x = _v180
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.orientation_constraints:
        _v181 = val1.header
        buff.write(_struct_I.pack(_v181.seq))
        _v182 = _v181.stamp
        _x = _v182
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v181.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v183 = val1.orientation
        _x = _v183
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal.motion_plan_request.goal_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.goal_constraints.visibility_constraints:
        _v184 = val1.header
        buff.write(_struct_I.pack(_v184.seq))
        _v185 = _v184.stamp
        _x = _v185
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v184.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v186 = val1.target
        _v187 = _v186.header
        buff.write(_struct_I.pack(_v187.seq))
        _v188 = _v187.stamp
        _x = _v188
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v187.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v189 = _v186.point
        _x = _v189
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v190 = val1.sensor_pose
        _v191 = _v190.header
        buff.write(_struct_I.pack(_v191.seq))
        _v192 = _v191.stamp
        _x = _v192
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v191.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v193 = _v190.pose
        _v194 = _v193.position
        _x = _v194
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v195 = _v193.orientation
        _x = _v195
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      length = len(self.goal.motion_plan_request.path_constraints.joint_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.joint_constraints:
        _x = val1.joint_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_4d.pack(_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight))
      length = len(self.goal.motion_plan_request.path_constraints.position_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.position_constraints:
        _v196 = val1.header
        buff.write(_struct_I.pack(_v196.seq))
        _v197 = _v196.stamp
        _x = _v197
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v196.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v198 = val1.target_point_offset
        _x = _v198
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v199 = val1.position
        _x = _v199
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v200 = val1.constraint_region_shape
        buff.write(_struct_b.pack(_v200.type))
        length = len(_v200.dimensions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(_v200.dimensions.tostring())
        length = len(_v200.triangles)
        buff.write(_struct_I.pack(length))
        pattern = '<%si'%length
        buff.write(_v200.triangles.tostring())
        length = len(_v200.vertices)
        buff.write(_struct_I.pack(length))
        for val3 in _v200.vertices:
          _x = val3
          buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v201 = val1.constraint_region_orientation
        _x = _v201
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.weight))
      length = len(self.goal.motion_plan_request.path_constraints.orientation_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.orientation_constraints:
        _v202 = val1.header
        buff.write(_struct_I.pack(_v202.seq))
        _v203 = _v202.stamp
        _x = _v203
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v202.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.link_name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_i.pack(val1.type))
        _v204 = val1.orientation
        _x = _v204
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        _x = val1
        buff.write(_struct_4d.pack(_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight))
      length = len(self.goal.motion_plan_request.path_constraints.visibility_constraints)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.motion_plan_request.path_constraints.visibility_constraints:
        _v205 = val1.header
        buff.write(_struct_I.pack(_v205.seq))
        _v206 = _v205.stamp
        _x = _v206
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v205.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v207 = val1.target
        _v208 = _v207.header
        buff.write(_struct_I.pack(_v208.seq))
        _v209 = _v208.stamp
        _x = _v209
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v208.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v210 = _v207.point
        _x = _v210
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v211 = val1.sensor_pose
        _v212 = _v211.header
        buff.write(_struct_I.pack(_v212.seq))
        _v213 = _v212.stamp
        _x = _v213
        buff.write(_struct_2I.pack(_x.secs, _x.nsecs))
        _x = _v212.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _v214 = _v211.pose
        _v215 = _v214.position
        _x = _v215
        buff.write(_struct_3d.pack(_x.x, _x.y, _x.z))
        _v216 = _v214.orientation
        _x = _v216
        buff.write(_struct_4d.pack(_x.x, _x.y, _x.z, _x.w))
        buff.write(_struct_d.pack(val1.absolute_tolerance))
      _x = self.goal.motion_plan_request.planner_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.motion_plan_request.group_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7i.pack(_x.goal.motion_plan_request.num_planning_attempts, _x.goal.motion_plan_request.allowed_planning_time.secs, _x.goal.motion_plan_request.allowed_planning_time.nsecs, _x.goal.motion_plan_request.expected_path_duration.secs, _x.goal.motion_plan_request.expected_path_duration.nsecs, _x.goal.motion_plan_request.expected_path_dt.secs, _x.goal.motion_plan_request.expected_path_dt.nsecs))
      length = len(self.goal.operations.collision_operations)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.operations.collision_operations:
        _x = val1.object1
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1.object2
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_struct_di.pack(_x.penetration_distance, _x.operation))
      _x = self
      buff.write(_struct_4B.pack(_x.goal.accept_partial_plans, _x.goal.accept_invalid_goals, _x.goal.disable_ik, _x.goal.disable_collision_monitoring))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = arm_navigation_msgs.msg.MoveArmGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planner_service_name = str[start:end].decode('utf-8')
      else:
        self.goal.planner_service_name = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.planning_scene_diff.robot_state.joint_state.header.seq, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.secs, _x.goal.planning_scene_diff.robot_state.joint_state.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_scene_diff.robot_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.planning_scene_diff.robot_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.secs, _x.goal.planning_scene_diff.robot_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v217 = val1.position
        _x = _v217
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v218 = val1.orientation
        _x = _v218
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_scene_diff.robot_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.fixed_frame_transforms = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.TransformStamped()
        _v219 = val1.header
        start = end
        end += 4
        (_v219.seq,) = _struct_I.unpack(str[start:end])
        _v220 = _v219.stamp
        _x = _v220
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v219.frame_id = str[start:end].decode('utf-8')
        else:
          _v219.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.child_frame_id = str[start:end].decode('utf-8')
        else:
          val1.child_frame_id = str[start:end]
        _v221 = val1.transform
        _v222 = _v221.translation
        _x = _v222
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v223 = _v221.rotation
        _x = _v223
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.planning_scene_diff.fixed_frame_transforms.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_collision_matrix.link_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.planning_scene_diff.allowed_collision_matrix.link_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_collision_matrix.entries = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AllowedCollisionEntry()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sB'%length
        start = end
        end += struct.calcsize(pattern)
        val1.enabled = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
        val1.enabled = map(bool, val1.enabled)
        self.goal.planning_scene_diff.allowed_collision_matrix.entries.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.allowed_contacts = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AllowedContactSpecification()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _v224 = val1.shape
        start = end
        end += 1
        (_v224.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v224.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v224.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v224.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v224.vertices.append(val3)
        _v225 = val1.pose_stamped
        _v226 = _v225.header
        start = end
        end += 4
        (_v226.seq,) = _struct_I.unpack(str[start:end])
        _v227 = _v226.stamp
        _x = _v227
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v226.frame_id = str[start:end].decode('utf-8')
        else:
          _v226.frame_id = str[start:end]
        _v228 = _v225.pose
        _v229 = _v228.position
        _x = _v229
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v230 = _v228.orientation
        _x = _v230
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.link_names = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.link_names.append(val2)
        start = end
        end += 8
        (val1.penetration_depth,) = _struct_d.unpack(str[start:end])
        self.goal.planning_scene_diff.allowed_contacts.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.link_padding = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.LinkPadding()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 8
        (val1.padding,) = _struct_d.unpack(str[start:end])
        self.goal.planning_scene_diff.link_padding.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.collision_objects = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.CollisionObject()
        _v231 = val1.header
        start = end
        end += 4
        (_v231.seq,) = _struct_I.unpack(str[start:end])
        _v232 = _v231.stamp
        _x = _v232
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v231.frame_id = str[start:end].decode('utf-8')
        else:
          _v231.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.id = str[start:end].decode('utf-8')
        else:
          val1.id = str[start:end]
        start = end
        end += 4
        (val1.padding,) = _struct_f.unpack(str[start:end])
        _v233 = val1.operation
        start = end
        end += 1
        (_v233.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.shapes = []
        for i in range(0, length):
          val2 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val2.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val2.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val2.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val2.vertices = []
          for i in range(0, length):
            val3 = geometry_msgs.msg.Point()
            _x = val3
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val2.vertices.append(val3)
          val1.shapes.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poses = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Pose()
          _v234 = val2.position
          _x = _v234
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v235 = val2.orientation
          _x = _v235
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          val1.poses.append(val2)
        self.goal.planning_scene_diff.collision_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.attached_collision_objects = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.AttachedCollisionObject()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v236 = val1.object
        _v237 = _v236.header
        start = end
        end += 4
        (_v237.seq,) = _struct_I.unpack(str[start:end])
        _v238 = _v237.stamp
        _x = _v238
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v237.frame_id = str[start:end].decode('utf-8')
        else:
          _v237.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v236.id = str[start:end].decode('utf-8')
        else:
          _v236.id = str[start:end]
        start = end
        end += 4
        (_v236.padding,) = _struct_f.unpack(str[start:end])
        _v239 = _v236.operation
        start = end
        end += 1
        (_v239.operation,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v236.shapes = []
        for i in range(0, length):
          val3 = arm_navigation_msgs.msg.Shape()
          start = end
          end += 1
          (val3.type,) = _struct_b.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%sd'%length
          start = end
          end += struct.calcsize(pattern)
          val3.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          pattern = '<%si'%length
          start = end
          end += struct.calcsize(pattern)
          val3.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          val3.vertices = []
          for i in range(0, length):
            val4 = geometry_msgs.msg.Point()
            _x = val4
            start = end
            end += 24
            (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
            val3.vertices.append(val4)
          _v236.shapes.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v236.poses = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Pose()
          _v240 = val3.position
          _x = _v240
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v241 = val3.orientation
          _x = _v241
          start = end
          end += 32
          (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
          _v236.poses.append(val3)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.touch_links = []
        for i in range(0, length):
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2 = str[start:end].decode('utf-8')
          else:
            val2 = str[start:end]
          val1.touch_links.append(val2)
        self.goal.planning_scene_diff.attached_collision_objects.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.planning_scene_diff.collision_map.header.seq, _x.goal.planning_scene_diff.collision_map.header.stamp.secs, _x.goal.planning_scene_diff.collision_map.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.planning_scene_diff.collision_map.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.planning_scene_diff.collision_map.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.planning_scene_diff.collision_map.boxes = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientedBoundingBox()
        _v242 = val1.center
        _x = _v242
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v243 = val1.extents
        _x = _v243
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        _v244 = val1.axis
        _x = _v244
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        start = end
        end += 4
        (val1.angle,) = _struct_f.unpack(str[start:end])
        self.goal.planning_scene_diff.collision_map.boxes.append(val1)
      start = end
      end += 1
      (self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.type,) = _struct_b.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        self.goal.motion_plan_request.workspace_parameters.workspace_region_shape.vertices.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.seq, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.secs, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.workspace_parameters.workspace_region_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.position.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.x, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.y, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.z, _x.goal.motion_plan_request.workspace_parameters.workspace_region_pose.pose.orientation.w, _x.goal.motion_plan_request.start_state.joint_state.header.seq, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.secs, _x.goal.motion_plan_request.start_state.joint_state.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.start_state.joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.start_state.joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.motion_plan_request.start_state.joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.secs, _x.goal.motion_plan_request.start_state.multi_dof_joint_state.stamp.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.child_frame_ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Pose()
        _v245 = val1.position
        _x = _v245
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v246 = val1.orientation
        _x = _v246
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.start_state.multi_dof_joint_state.poses.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v247 = val1.header
        start = end
        end += 4
        (_v247.seq,) = _struct_I.unpack(str[start:end])
        _v248 = _v247.stamp
        _x = _v248
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v247.frame_id = str[start:end].decode('utf-8')
        else:
          _v247.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v249 = val1.target_point_offset
        _x = _v249
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v250 = val1.position
        _x = _v250
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v251 = val1.constraint_region_shape
        start = end
        end += 1
        (_v251.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v251.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v251.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v251.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v251.vertices.append(val3)
        _v252 = val1.constraint_region_orientation
        _x = _v252
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v253 = val1.header
        start = end
        end += 4
        (_v253.seq,) = _struct_I.unpack(str[start:end])
        _v254 = _v253.stamp
        _x = _v254
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v253.frame_id = str[start:end].decode('utf-8')
        else:
          _v253.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v255 = val1.orientation
        _x = _v255
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.goal_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v256 = val1.header
        start = end
        end += 4
        (_v256.seq,) = _struct_I.unpack(str[start:end])
        _v257 = _v256.stamp
        _x = _v257
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v256.frame_id = str[start:end].decode('utf-8')
        else:
          _v256.frame_id = str[start:end]
        _v258 = val1.target
        _v259 = _v258.header
        start = end
        end += 4
        (_v259.seq,) = _struct_I.unpack(str[start:end])
        _v260 = _v259.stamp
        _x = _v260
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v259.frame_id = str[start:end].decode('utf-8')
        else:
          _v259.frame_id = str[start:end]
        _v261 = _v258.point
        _x = _v261
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v262 = val1.sensor_pose
        _v263 = _v262.header
        start = end
        end += 4
        (_v263.seq,) = _struct_I.unpack(str[start:end])
        _v264 = _v263.stamp
        _x = _v264
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v263.frame_id = str[start:end].decode('utf-8')
        else:
          _v263.frame_id = str[start:end]
        _v265 = _v262.pose
        _v266 = _v265.position
        _x = _v266
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v267 = _v265.orientation
        _x = _v267
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.goal_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.joint_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.JointConstraint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.joint_name = str[start:end].decode('utf-8')
        else:
          val1.joint_name = str[start:end]
        _x = val1
        start = end
        end += 32
        (_x.position, _x.tolerance_above, _x.tolerance_below, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.joint_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.position_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.PositionConstraint()
        _v268 = val1.header
        start = end
        end += 4
        (_v268.seq,) = _struct_I.unpack(str[start:end])
        _v269 = _v268.stamp
        _x = _v269
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v268.frame_id = str[start:end].decode('utf-8')
        else:
          _v268.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        _v270 = val1.target_point_offset
        _x = _v270
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v271 = val1.position
        _x = _v271
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v272 = val1.constraint_region_shape
        start = end
        end += 1
        (_v272.type,) = _struct_b.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        _v272.dimensions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%si'%length
        start = end
        end += struct.calcsize(pattern)
        _v272.triangles = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v272.vertices = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
          _v272.vertices.append(val3)
        _v273 = val1.constraint_region_orientation
        _x = _v273
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.weight,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.position_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.orientation_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.OrientationConstraint()
        _v274 = val1.header
        start = end
        end += 4
        (_v274.seq,) = _struct_I.unpack(str[start:end])
        _v275 = _v274.stamp
        _x = _v275
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v274.frame_id = str[start:end].decode('utf-8')
        else:
          _v274.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.link_name = str[start:end].decode('utf-8')
        else:
          val1.link_name = str[start:end]
        start = end
        end += 4
        (val1.type,) = _struct_i.unpack(str[start:end])
        _v276 = val1.orientation
        _x = _v276
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        _x = val1
        start = end
        end += 32
        (_x.absolute_roll_tolerance, _x.absolute_pitch_tolerance, _x.absolute_yaw_tolerance, _x.weight,) = _struct_4d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.orientation_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.motion_plan_request.path_constraints.visibility_constraints = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.VisibilityConstraint()
        _v277 = val1.header
        start = end
        end += 4
        (_v277.seq,) = _struct_I.unpack(str[start:end])
        _v278 = _v277.stamp
        _x = _v278
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v277.frame_id = str[start:end].decode('utf-8')
        else:
          _v277.frame_id = str[start:end]
        _v279 = val1.target
        _v280 = _v279.header
        start = end
        end += 4
        (_v280.seq,) = _struct_I.unpack(str[start:end])
        _v281 = _v280.stamp
        _x = _v281
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v280.frame_id = str[start:end].decode('utf-8')
        else:
          _v280.frame_id = str[start:end]
        _v282 = _v279.point
        _x = _v282
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v283 = val1.sensor_pose
        _v284 = _v283.header
        start = end
        end += 4
        (_v284.seq,) = _struct_I.unpack(str[start:end])
        _v285 = _v284.stamp
        _x = _v285
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2I.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v284.frame_id = str[start:end].decode('utf-8')
        else:
          _v284.frame_id = str[start:end]
        _v286 = _v283.pose
        _v287 = _v286.position
        _x = _v287
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _struct_3d.unpack(str[start:end])
        _v288 = _v286.orientation
        _x = _v288
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _struct_4d.unpack(str[start:end])
        start = end
        end += 8
        (val1.absolute_tolerance,) = _struct_d.unpack(str[start:end])
        self.goal.motion_plan_request.path_constraints.visibility_constraints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.planner_id = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.planner_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.motion_plan_request.group_name = str[start:end].decode('utf-8')
      else:
        self.goal.motion_plan_request.group_name = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.goal.motion_plan_request.num_planning_attempts, _x.goal.motion_plan_request.allowed_planning_time.secs, _x.goal.motion_plan_request.allowed_planning_time.nsecs, _x.goal.motion_plan_request.expected_path_duration.secs, _x.goal.motion_plan_request.expected_path_duration.nsecs, _x.goal.motion_plan_request.expected_path_dt.secs, _x.goal.motion_plan_request.expected_path_dt.nsecs,) = _struct_7i.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.operations.collision_operations = []
      for i in range(0, length):
        val1 = arm_navigation_msgs.msg.CollisionOperation()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object1 = str[start:end].decode('utf-8')
        else:
          val1.object1 = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.object2 = str[start:end].decode('utf-8')
        else:
          val1.object2 = str[start:end]
        _x = val1
        start = end
        end += 12
        (_x.penetration_distance, _x.operation,) = _struct_di.unpack(str[start:end])
        self.goal.operations.collision_operations.append(val1)
      _x = self
      start = end
      end += 4
      (_x.goal.accept_partial_plans, _x.goal.accept_invalid_goals, _x.goal.disable_ik, _x.goal.disable_collision_monitoring,) = _struct_4B.unpack(str[start:end])
      self.goal.accept_partial_plans = bool(self.goal.accept_partial_plans)
      self.goal.accept_invalid_goals = bool(self.goal.accept_invalid_goals)
      self.goal.disable_ik = bool(self.goal.disable_ik)
      self.goal.disable_collision_monitoring = bool(self.goal.disable_collision_monitoring)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7d3I = struct.Struct("<7d3I")
_struct_b = struct.Struct("<b")
_struct_d = struct.Struct("<d")
_struct_f = struct.Struct("<f")
_struct_di = struct.Struct("<di")
_struct_7i = struct.Struct("<7i")
_struct_3f = struct.Struct("<3f")
_struct_i = struct.Struct("<i")
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_4B = struct.Struct("<4B")
_struct_2I = struct.Struct("<2I")
_struct_3d = struct.Struct("<3d")
